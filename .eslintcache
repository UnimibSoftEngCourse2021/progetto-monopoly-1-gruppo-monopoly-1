[{"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\index.js":"1","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\Menu.js":"2","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\reportWebVitals.js":"3","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\App.js":"4","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentMenuDx.js":"5","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaDifficolta.js":"6","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaLeft.js":"7","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaRight.js":"8","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\iniziaPartita.js":"9","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaNumeroGiocatori.js":"10","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaSociet√†Stazioni.js":"11","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaTerreni.js":"12","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentBoard.js":"13","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaGiocatori.js":"14","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Banca.js":"15","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentController.js":"16","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Pedina.js":"17","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaPedina.js":"18","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Costruisci.js":"19","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Acquista.js":"20","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\VendiEdificio.js":"21","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Vendi.js":"22","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Ipoteca.js":"23","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\CarteProbabilitaImprevisto\\Carte.js":"24"},{"size":528,"mtime":1611054252000,"results":"25","hashOfConfig":"26"},{"size":1861,"mtime":1611151905800,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1611054252000,"results":"28","hashOfConfig":"26"},{"size":12491,"mtime":1611149060779,"results":"29","hashOfConfig":"26"},{"size":1007,"mtime":1611054252000,"results":"30","hashOfConfig":"26"},{"size":1423,"mtime":1611152080300,"results":"31","hashOfConfig":"26"},{"size":257,"mtime":1611054252000,"results":"32","hashOfConfig":"26"},{"size":257,"mtime":1611054252000,"results":"33","hashOfConfig":"26"},{"size":1277,"mtime":1611149060767,"results":"34","hashOfConfig":"26"},{"size":2015,"mtime":1611054252000,"results":"35","hashOfConfig":"26"},{"size":3142,"mtime":1611054252000,"results":"36","hashOfConfig":"26"},{"size":7454,"mtime":1611054252000,"results":"37","hashOfConfig":"26"},{"size":5988,"mtime":1611149060724,"results":"38","hashOfConfig":"26"},{"size":2758,"mtime":1611149060798,"results":"39","hashOfConfig":"26"},{"size":1470,"mtime":1611103104485,"results":"40","hashOfConfig":"26"},{"size":13678,"mtime":1611152593458,"results":"41","hashOfConfig":"26"},{"size":370,"mtime":1611054252000,"results":"42","hashOfConfig":"26"},{"size":8656,"mtime":1611149060759,"results":"43","hashOfConfig":"26"},{"size":6080,"mtime":1611054252000,"results":"44","hashOfConfig":"26"},{"size":3460,"mtime":1611054252000,"results":"45","hashOfConfig":"26"},{"size":4844,"mtime":1611054252000,"results":"46","hashOfConfig":"26"},{"size":8978,"mtime":1611054252000,"results":"47","hashOfConfig":"26"},{"size":8940,"mtime":1611054252000,"results":"48","hashOfConfig":"26"},{"size":4139,"mtime":1611054252000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"13tp3jl",{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"53"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"53"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"53"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"53"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"53"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"53"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"53"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"53"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"53"},"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\index.js",["111"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Menu from './Menu';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Menu />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["112","113"],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\Menu.js",["114","115"],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\reportWebVitals.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\App.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentMenuDx.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaDifficolta.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaLeft.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaRight.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\iniziaPartita.js",["116"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\nimport App from '../App';\r\nimport Banca from './Banca'\r\nimport SceltaPedina from './SceltaPedina'\r\n\r\nexport function iniziaPartita(numero, diff) {\r\n\r\n    let numeroGiocatori = numero;\r\n    let difficolta = diff;\r\n\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <SceltaPedina numeroGiocatori={numeroGiocatori} difficolta={difficolta}/>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n    //alert('prova '+numeroGiocatori);\r\n    if(numeroGiocatori===2){\r\n        <Banca saldoContoPedine={[8750,8750,0,0,0,0]} contrattiGiocatori={[7,7,0,0,0,0]} />\r\n    }\r\n    if(numeroGiocatori===3){\r\n        <Banca saldoContoPedine={[7500,7500,7500,0,0,0]} contrattiGiocatori={[6,6,6,0,0,0]} />\r\n    }\r\n    if(numeroGiocatori===4){\r\n        <Banca saldoContoPedine={[6250,6250,6250,6250,0,0]} contrattiGiocatori={[5,5,5,5,0,0]} />\r\n    }\r\n    if(numeroGiocatori===5){\r\n        <Banca saldoContoPedine={[5000,5000,5000,5000,5000,0]} contrattiGiocatori={[4,4,4,4,4,0]} />\r\n    }\r\n    if(numeroGiocatori===6){\r\n        <Banca saldoContoPedine={[3750,3750,3750,3750,3750,3750]} contrattiGiocatori={[3,3,3,3,3,3]} />\r\n    }\r\n}\r\n\r\nexport default iniziaPartita()\r\n","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaNumeroGiocatori.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaSociet√†Stazioni.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaTerreni.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentBoard.js",["117","118","119"],"import React from 'react';\r\nimport Pedina from './Pedina';\r\nimport ComponentController from './ComponentController';\r\n\r\nimport hat from '../img/hat.png';\r\nimport iron from '../img/iron.png';\r\nimport car from '../img/car.png';\r\nimport boat from '../img/boat.png';\r\nimport doggo from '../img/doggo.png';\r\nimport shoe from '../img/shoe.png';\r\nimport thimble from '../img/thimble.png';\r\nimport wheelbarrow from '../img/wheelbarrow.png';\r\n\r\n// Struttura dati che mappa la tavola da gioco.\r\n// Partendo da GO come elemento 0 e proseguendo nel verso di gioco\r\n// Tracciato record: indice, ascissa, ordinata, nome casella\r\nconst tavolaGioco = [\r\n    [0, 940, 600, \"GO\"],\r\n    [1, 870, 600, \"GO\"],\r\n    [2, 820, 600, \"GO\"],\r\n    [3, 770, 600, \"GO\"],\r\n    [4, 720, 600, \"GO\"],\r\n    [5, 660, 600, \"GO\"],\r\n    [6, 610, 600, \"GO\"],\r\n    [7, 560, 600, \"GO\"],\r\n    [8, 500, 600, \"GO\"],\r\n    [9, 450, 600, \"GO\"],\r\n    [10, 370, 600, \"JAIL\"],\r\n    [11, 370, 530, \"GO\"],\r\n    [12, 370, 480, \"GO\"],\r\n    [13, 370, 420, \"GO\"],\r\n    [14, 370, 360, \"GO\"],\r\n    [15, 370, 310, \"GO\"],\r\n    [16, 370, 250, \"GO\"],\r\n    [17, 370, 200, \"GO\"],\r\n    [18, 370, 150, \"GO\"],\r\n    [19, 370, 100, \"GO\"],\r\n    [20, 370, 20, \"FREE PARKING\"],\r\n    [21, 450, 20, \"GO\"],\r\n    [22, 500, 20, \"GO\"],\r\n    [23, 560, 20, \"GO\"],\r\n    [24, 610, 20, \"GO\"],\r\n    [25, 660, 20, \"GO\"],\r\n    [26, 720, 20, \"GO\"],\r\n    [27, 770, 20, \"GO\"],\r\n    [28, 820, 20, \"GO\"],\r\n    [29, 880, 20, \"GO\"],\r\n    [30, 940, 20, \"GO TO JAIL\"],\r\n    [31, 940, 100, \"GO\"],\r\n    [32, 940, 150, \"GO\"],\r\n    [33, 940, 200, \"GO\"],\r\n    [34, 940, 250, \"GO\"],\r\n    [35, 940, 310, \"GO\"],\r\n    [36, 940, 360, \"GO\"],\r\n    [37, 940, 420, \"GO\"],\r\n    [38, 940, 480, \"GO\"],\r\n    [39, 940, 530, \"GO\"]\r\n];\r\n\r\nclass ComponentBoard extends React.Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          // Tracciato record: nome, ascissa, ordinata, visibilita, strato, attualeCasella  \r\n          segnalini: [\r\n                        [\"hat\", 940, 600, \"visible\",0,0],\r\n                        [\"iron\", 940, 600, \"visible\",1,0],\r\n                        [\"car\", 940, 600, \"visible\",2,0],\r\n                        [\"boat\", 940, 600, \"visible\",3,0],\r\n                        [\"doggo\", 940, 600, \"visible\",4,0],\r\n                        [\"shoe\", 940, 600, \"visible\",5,0],\r\n                        [\"thimble\", 940, 600, \"hidden\",6,0],\r\n                        [\"wheelbarrow\", 940, 600, \"hidden\",7,0],\r\n                    ],\r\n         // turnoGiocatore: 0,\r\n         // numeroGiocatori: 4\r\n        };\r\n      }\r\n\r\n      \r\n      muoviPedine = changeEvent => {\r\n        this.setState({\r\n            \r\n        })\r\n      }\r\n  \r\n\r\n    render () {\r\n\r\n        for (let i = 0; i < this.state.segnalini.length; i++) {\r\n            let visSegn;\r\n            const [a, xposSegnalino, tposSegnalino, visSegnalino, strato] = this.state.segnalini[i];\r\n            /// if visibiit√† segnalini\r\n            if (i<=this.props.numeroGiocatori-1) {visSegn='visible'} else {visSegn='hidden'}\r\n\r\n            const segnalinoSet = {  left: xposSegnalino+\"px\",\r\n                                    top: tposSegnalino+\"px\",\r\n                                    visibility: visSegn,\r\n                                    zIndex: strato\r\n                                 }\r\n            switch (a) {\r\n                case \"car\": var mystyleCar = segnalinoSet;\r\n                    break;\r\n                case \"boat\": var mystyleBoat = segnalinoSet;\r\n                    break;\r\n                case \"hat\": var mystyleHat = segnalinoSet;\r\n                    break;\r\n                case \"iron\": var mystyleIron = segnalinoSet;\r\n                    break;\r\n                case \"doggo\": var mystyleDoggo = segnalinoSet;\r\n                    break;\r\n                case \"shoe\": var mystyleShoe = segnalinoSet;\r\n                    break;\r\n                case \"thimble\": var mystyleThimble = segnalinoSet;\r\n                    break;\r\n                case \"wheelbarrow\": var mystyleWheelbarrow = segnalinoSet;\r\n                    break;                    \r\n            }                   \r\n        }\r\n\r\n    \r\n  \r\n\r\n        \r\n             \r\n        return (\r\n            <div className=\"imgTavola\" >\r\n                <Pedina figura={car} stile={mystyleCar} />\r\n                <Pedina figura={boat} stile={mystyleBoat} />  \r\n                <Pedina figura={hat} stile={mystyleHat} />\r\n                <Pedina figura={iron} stile={mystyleIron} />\r\n                <Pedina figura={doggo} stile={mystyleDoggo} />\r\n                <Pedina figura={shoe} stile={mystyleShoe} />\r\n                <Pedina figura={thimble} stile={mystyleThimble} />\r\n                <Pedina figura={wheelbarrow} stile={mystyleWheelbarrow} />\r\n\r\n                <ComponentController \r\n                    segnalini={this.state.segnalini} muoviPedine={this.muoviPedine} \r\n                    muoviPedine={this.muoviPedine} \r\n                    tavolaGioco={tavolaGioco} \r\n                    turnoGiocatore={this.props.turnoGiocatore} \r\n                    setTurnoGiocatore={this.props.setTurnoGiocatore}\r\n                    numeroGiocatori={this.props.numeroGiocatori}\r\n                    terreni={this.props.terreni}\r\n                    setTerreni={this.props.setTerreni}\r\n                    giocatori={this.props.giocatori}\r\n                    setGiocatori={this.props.setGiocatori}\r\n                    societ√†Stazioni={this.props.societ√†Stazioni}\r\n                    setSociet√†Stazioni={this.props.setSociet√†Stazioni}\r\n                    caselle={this.props.caselle} \r\n                    setCaselle={this.props.setCaselle}\r\n                    tempo={this.props.tempo}\r\n                    setTempo={this.props.setTempo}\r\n                />\r\n\r\n            \r\n                                     \r\n                                    \r\n                                    \r\n\r\n            </div>\r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ComponentBoard;\r\n\r\n","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaGiocatori.js",["120","121","122","123","124","125","126","127"],"import React from 'react'\r\nimport { Box, TableCell, TableRow, TableBody, TableContainer, Table, TableHead, Typography} from '@material-ui/core';\r\nimport hat from '../../img/hat.png';\r\nimport iron from '../../img/iron.png';\r\nimport car from '../../img/car.png';\r\nimport boat from '../../img/boat.png';\r\nimport doggo from '../../img/doggo.png';\r\nimport shoe from '../../img/shoe.png';\r\nimport thimble from '../../img/thimble.png';\r\nimport wheelbarrow from '../../img/wheelbarrow.png';\r\n\r\n\r\n\r\nfunction TabellaGiocatori (props) {\r\n\r\n    \r\n    \r\n    function createData(nome, pedina, capitale) {\r\n        return { nome, pedina, capitale };\r\n    }\r\n      \r\n      const rows = [props.giocatori.length];\r\n\r\n      var i;\r\n      for(i=0; i < props.giocatori.length; i++){\r\n        rows[i] = createData(props.giocatori[i].nome, props.giocatori[i].pedina, props.giocatori[i].capitale)\r\n      }\r\n     \r\n      var turno = props.turnoGiocatore.toString();\r\n      \r\n    \r\n        return (\r\n            <div>\r\n                <h3 align='center'>\r\n                    Tabella dei giocatori\r\n                </h3>\r\n                <Box width={'300px'}>\r\n                <TableContainer >\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Giocatore</TableCell>\r\n                                <TableCell align=\"right\">Pedina</TableCell>\r\n                                <TableCell align=\"right\">Capitale</TableCell>\r\n                                \r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <TableRow key={row.name}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.nome===turno?\r\n                                        <Typography align='center' style={{background:'#cddc39'}}>{row.nome}</Typography>\r\n                                        :\r\n                                        <Typography >{row.nome}</Typography>\r\n                                        }\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\"><img alt=\"\" src={row.pedina} style={{width:'35px'}}/></TableCell>\r\n                                    <TableCell align=\"right\">{row.capitale}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                </Box>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default TabellaGiocatori;\r\n\r\n\r\n","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Banca.js",["128","129"],"import React, { Component } from 'react';\r\nimport TabellaGiocatori from './Tabelle/TabellaGiocatori';\r\n\r\nclass Banca extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            saldoContoGiocatori: [0,0,0,0,0,0],\r\n            contrattiGiocatori: [0,0,0,0,0,0],\r\n        }\r\n    }\r\n\r\n\r\n    // Passa i parametri a TabellaGiocatori (attualmente non funziona)\r\n    creaTabellaGiocatori = () => {\r\n        for(let i=1; i<=6; i++){\r\n            //this.state.createData(i, this.state.saldoContoGiocatori[i]);\r\n            <TabellaGiocatori props={i, this.state.saldoContoGiocatori[i]} />\r\n        }\r\n    }\r\n\r\n    //Modifica il saldo al giocatore (giocatore identificato tramite un numero int)\r\n    modificaSaldo = (sommaDiDenaro, giocatore) => {\r\n        if(this.state.saldoContoPedine[giocatore] + sommaDiDenaro >= 0){\r\n            this.state.saldoContoPedine[giocatore] += sommaDiDenaro;\r\n        }else{\r\n            console.log(\"Errore\"); //TODO\r\n        }\r\n    }\r\n\r\n    giocatorePassaDalVia = (giocatori,turnoGiocatore,setGiocatori) => {\r\n        // Incrementa il capitale del giocatore di turno di 500 quando passa dal VIA              \r\n        var nuoviGiocatori = giocatori;\r\n        nuoviGiocatori[turnoGiocatore].capitale=giocatori[turnoGiocatore].capitale+500;\r\n        setGiocatori(nuoviGiocatori);\r\n        alert('Giocatore:'+turnoGiocatore+ 'Passa Dal Via');  \r\n    }\r\n\r\n    getSaldoGiocatore\r\n}\r\nexport default Banca;","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentController.js",["130","131","132","133","134","135"],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Pedina.js",[],"E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaPedina.js",["136"],"import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from '../App'\r\nimport hat from '../img/hat.png'\r\nimport iron from '../img/iron.png'\r\nimport car from '../img/car.png'\r\nimport boat from '../img/boat.png'\r\nimport doggo from '../img/doggo.png'\r\nimport shoe from '../img/shoe.png'\r\nimport thimble from '../img/thimble.png'\r\nimport wheelbarrow from '../img/wheelbarrow.png'\r\n\r\nfunction SceltaPedina(props){\r\n\r\n    const pedine = [boat, car, doggo, hat, iron, shoe, thimble, wheelbarrow];\r\n    const [giocatoreAttuale, setGiocatoreAttuale] = React.useState(1);\r\n    \r\n    const [iniziaPartita, setIniziaPatita] = React.useState(false);\r\n    const numeroGiocatori = parseInt(props.numeroGiocatori);\r\n   \r\n    \r\n    const [giocatori, setGiocatori] = React.useState(\r\n        [\r\n          {\r\n            nome: '0',\r\n            capitale: 1500,\r\n            pedina: '',\r\n            inGioco: false,\r\n          },\r\n          {\r\n            nome: '1',\r\n            capitale: 1500,\r\n            pedina: '',\r\n            inGioco: false,\r\n          },\r\n          {\r\n            nome: '2',\r\n            capitale: 1500,\r\n            pedina: '',\r\n            inGioco: false,\r\n          },\r\n          {\r\n            nome: '3',\r\n            capitale: 1500,\r\n            pedina: '',\r\n            inGioco: false,\r\n          },\r\n          {\r\n            nome: '4',\r\n            capitale: 1500,\r\n            pedina: '',\r\n            inGioco: false,\r\n          },\r\n          {\r\n            nome: '5',\r\n            capitale: 1500,\r\n            pedina: '',\r\n            inGioco: false,\r\n          },\r\n        ]\r\n      );\r\n\r\n    // Questa funzione crea una lista di oggetti. Ogni oggetto rappresenta un giocatore.\r\n    // Ogni giocatore √® caratterizzato da un numero e da una pedina.\r\n    function associaGiocatorePedina(pedina){\r\n        // Se una pedina √® gi√† stata scelta da un giocatore, non pu√≤ pi√π essere scelta dagli altri.\r\n        if (giocatori.find(giocatore => giocatore.pedina === pedina)) {\r\n            alert('Non puoi scegliere una pedina gi√† selezionata!');\r\n        }\r\n        // Se la pedina √® disponibile, aggiunge alla lista dei giocatori un oggetto avente per giocatore\r\n        // il numero del giocatore attuale e per pedina la pedina selezionata.\r\n        else {\r\n            setGiocatoreAttuale(giocatoreAttuale + 1);\r\n            var giocatori0 = giocatori;\r\n            var n = giocatoreAttuale-1;\r\n            giocatori0[n] = {nome: n.toString(), capitale: 1500, pedina, inGioco: true };\r\n            setGiocatori(giocatori0);\r\n            \r\n            // Se tutti i giocatori hanno scelto la loro pedina, imposta iniziaPartita a true. \r\n            //In questo modo viene avviata la partita. \r\n            if(giocatoreAttuale === numeroGiocatori){\r\n                //Tolgo dall'array giocatori i giocatori in pi√π\r\n                //var nuoviGiocatori = giocatori[0, n];\r\n               // setGiocatori(nuoviGiocatori);\r\n                console.log(giocatori);\r\n                setIniziaPatita(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <div>\r\n                {\r\n                    // Se iniziaPartita √® true avvia la partita. Altrimenti si consente ai giocatori di scegliere la pedina.\r\n                    iniziaPartita ?\r\n                    ReactDOM.render(\r\n                        <React.StrictMode>\r\n                            <App \r\n                                numeroGiocatori={numeroGiocatori} \r\n                                difficolta={props.difficolta} \r\n                                giocatori={giocatori}\r\n                                setGiocatori={setGiocatori}\r\n                            />\r\n                        </React.StrictMode>,\r\n                        document.getElementById('root')\r\n                    )\r\n                    :\r\n                    <div className=\"scelta-pedina\">\r\n                        <h1>Giocatore {giocatoreAttuale} scegli la tua pedina:</h1>\r\n                        <div className=\"contenitore-pedine\">\r\n                            {\r\n                                pedine.map(pedina => (\r\n                                    <div className=\"contenitore-pedine-interno\" onClick={() => associaGiocatorePedina(pedina)}>\r\n                                        <img \r\n                                        alt=\"\"\r\n                                        className=\"scelta-pedina-immagine\"\r\n                                        src={pedina}/>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n                \r\n            </div>\r\n        );\r\n}\r\nexport default SceltaPedina;\r\n\r\n\r\n\r\n\r\n/*class SceltaPedina extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChangeGiocatori = this.handleChangeGiocatori.bind(this);\r\n        this.state = {\r\n            pedine: [boat, car, doggo, hat, iron, shoe, thimble, wheelbarrow],\r\n            giocatoreAttuale: 1,\r\n            giocatori0: [],\r\n            iniziaPartita: false,\r\n            numeroGiocatori: parseInt(this.props.numeroGiocatori),\r\n            difficolta: this.props.difficolta,\r\n            giocatori: []\r\n        }\r\n    }\r\n\r\n    handleChangeGiocatori(nuoviGiocatori) {\r\n        this.setState({giocatori: nuoviGiocatori});\r\n    }\r\n\r\n    // Questa funzione crea una lista di oggetti. Ogni oggetto rappresenta un giocatore.\r\n    // Ogni giocatore √® caratterizzato da un numero e da una pedina.\r\n    associaGiocatorePedina = (pedina) => {\r\n        // Se una pedina √® gi√† stata scelta da un giocatore, non pu√≤ pi√π essere scelta dagli altri.\r\n        if (this.state.giocatori0.find(giocatore => giocatore.pedina === pedina)) {\r\n            alert('Non puoi scegliere una pedina gi√† selezionata!');\r\n        // Se la pedina √® disponibile, aggiunge alla lista dei giocatori un oggetto avente per giocatore\r\n        // il numero del giocatore attuale e per pedina la pedina selezionata.\r\n        } else {\r\n            this.setState((statoPrecedente) => ({\r\n            giocatoreAttuale: statoPrecedente.giocatoreAttuale + 1,\r\n            giocatori0: [\r\n                ...statoPrecedente.giocatori, \r\n                {\r\n                    giocatore: statoPrecedente.giocatoreAttuale,\r\n                    pedina,\r\n                    capitale: 1500,\r\n                    inGioco: true\r\n                } \r\n            ],\r\n            // Se tutti i giocatori hanno scelto la loro pedina, imposta iniziaPartita a true. In questo modo viene avviata la partita. \r\n            iniziaPartita: statoPrecedente.giocatoreAttuale === this.state.numeroGiocatori ? true : false\r\n            })) \r\n        }\r\n    } \r\n\r\n    \r\n    render() {\r\n\r\n        \r\n        return(\r\n            <div>\r\n                {\r\n                    // Se iniziaPartita √® true avvia la partita. Altrimenti si consente ai giocatori di scegliere la pedina.\r\n                    this.state.iniziaPartita ?\r\n                    ReactDOM.render(\r\n                        <React.StrictMode>\r\n                            <App \r\n                                numeroGiocatori={this.state.numeroGiocatori} \r\n                                difficolta={this.state.difficolta} \r\n                                giocatori={this.state.giocatori}\r\n                                giocatori0={this.state.giocatori0}\r\n                                setGiocatori={this.handleChangeGiocatori}\r\n                            />\r\n                        </React.StrictMode>,\r\n                        document.getElementById('root')\r\n                    )\r\n                    :\r\n                    <div className=\"scelta-pedina\">\r\n                        <h1>Giocatore {this.state.giocatoreAttuale} scegli la tua pedina:</h1>\r\n                        <div className=\"contenitore-pedine\">\r\n                            {\r\n                                this.state.pedine.map(pedina => (\r\n                                    <div className=\"contenitore-pedine-interno\" onClick={() => this.associaGiocatorePedina(pedina)}>\r\n                                        <img \r\n                                        alt=\"\"\r\n                                        className=\"scelta-pedina-immagine\"\r\n                                        src={pedina}/>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SceltaPedina*/\r\n","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Costruisci.js",["137","138"],"import React from 'react';\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel, TextField, Grid} from '@material-ui/core';\n\n\nfunction Costruisci(props){\n\n    \n\n    \n\n//Stato del Modale utilizato per costruire un edificio\nconst [openModal, setOpenModal] = React.useState(false);\nconst handleOpen = () => { setOpenModal(true) };\nconst handleClose = () => { setOpenModal(false) };\n\n//Stato del RadioGrup casaAlbergo usato per scegliere la tipologia di edificio da costruire\nconst [edificio, setEdificio] = React.useState('casa');\nconst handleChangeTipoDiEdificio = (event) => { setEdificio(event.target.value) };\n\n//Stato del RadioGrup terreno usato per scegliere il terreno su cui costruire l'edificio\nconst [terreno, setTerreno] = React.useState(1);\nconst handleChangeTerreno = (event) => {\n  setTerreno(event.target.value);\n};\n\nfunction EsisteTerreno(){\n  var i = 0;\n  var esiste = false;\n  var n;\n  while(i < props.terreni.length){\n    if(terreno === props.terreni[i].nome){\n      esiste = true;\n      n = i;\n      i = 100;\n    }\n    else{\n      i++;\n    }\n  }\n  if(esiste){\n    return(n);\n  }\n  else{\n    return(-1);\n  }\n}\n\nfunction VerificaColore(colore, giocatore){\n  var i = 0;\n  while(i < props.terreni.length){\n    if((props.terreni[i].colore === colore) && !(props.terreni[i].proprietario === giocatore)){\n      return(false);\n    }\n    i++\n  }\n  \n  return(true);\n}\n\n\nfunction CostruisciCasa(){\n  //verifico che il terreno esista e salvo il risultato in propriet√†\n  var n = EsisteTerreno();\n  if(n === -1){\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.terreni[n];\n  //verifico che la propriet√† non sia ipotecata\n  if(propriet√†.ipotecato === true){\n    alert('Non puoi costruire su un terreno ipotecato');\n    return;\n  }\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\n    alert('Non puoi costruire su un terreno che non √® tuo');\n    return;\n  }\n  //Per poter costruire su propriet√† devi avere tutti i terreni dello stesso colore\n  var verifica = VerificaColore(propriet√†.colore, propriet√†.proprietario);\n  if(!verifica){\n    alert('Per costruire devi prima possedere tutte le caselle dello stesso colore');\n    return;\n  }\n  //Su un terreno si possono costruire massimo 4 case\n  if(propriet√†.case >= 4){\n    alert('Su un terreno si possono costruire massimo quattro case');\n    return;\n  }\n  //Se sul terreno c'√® un albergo non posso costruirvi delle case\n  if(propriet√†.alberghi > 0){\n    alert(\"Se su un terreno c'e' un albergo non puoi costruirvi una casa\");\n    return;\n  }\n  //modifico l'array terreni e l'array giocatori\n  propriet√†.case = propriet√†.case + 1;\n  console.log(propriet√†);\n  var nuoviTerreni = props.terreni;\n  nuoviTerreni[n] = propriet√†;\n  props.setTerreni(nuoviTerreni);\n  console.log(props.terreni);\n\n  var nuoviGiocatori = props.giocatori;\n  var costoCostruzione = propriet√†.valore*3/4;\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - costoCostruzione;\n  props.setGiocatori(nuoviGiocatori);\n  console.log(props.giocatori);\n\n  alert('La costruzione della casa √® andata a buon fine');\n\n}\n\nfunction CostruisciAlbergo(){\n  //verifico che il terreno esista e salvo il risultato in propriet√†\n  var n = EsisteTerreno();\n  if(n === -1){\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.terreni[n];\n  //verifico che la propriet√† non sia ipotecata\n  if(propriet√†.ipotecato === true){\n    alert('Non puoi costruire su un terreno ipotecato');\n    return;\n  }\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\n    alert('Non puoi costruire su un terreno che non √® tuo');\n    return;\n  }\n  //Su un terreno si pu√≤ costruire massimo un albergo\n  if(propriet√†.alberghi > 0){\n    alert('Su un terreno si pu√≤ costruire massimo un albergo');\n    return;\n  }\n  \n  //Per poter costruire un albergo devi avere quattro case su propriet√† \n  if(propriet√†.case < 4){\n    alert('Per costruire un albergo su questo terreno devi prima possedere quattro case');\n    return;\n  }\n  \n  //modifico l'array terreni e l'array giocatori\n  propriet√†.alberghi = propriet√†.alberghi + 1;\n  propriet√†.case = 0;\n  console.log(propriet√†);\n  var nuoviTerreni = props.terreni;\n  nuoviTerreni[n] = propriet√†;\n  props.setTerreni(nuoviTerreni);\n  console.log(props.terreni);\n\n  var nuoviGiocatori = props.giocatori;\n  var costoCostruzione = propriet√†.valore*3/4;\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - costoCostruzione;\n  props.setGiocatori(nuoviGiocatori);\n  console.log(props.giocatori);\n\n  alert(\"La costruzione dell'albergo √® andata a buon fine\");\n\n}\n\nfunction CostruisciEdificio(){\n  if(edificio === 'casa'){\n    CostruisciCasa();\n  }\n  else{\n    CostruisciAlbergo();\n  }\n  \n}\n\nconst body = (\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\n      \n    <h2 style={{margin:'16px'}}>Cosa vuoi costruire?</h2>\n    <RadioGroup value={edificio} onChange={handleChangeTipoDiEdificio} style={{margin:'16px'}}>\n        <FormControlLabel value=\"casa\" control={<Radio />} label=\"Casa\" />\n        <FormControlLabel value=\"albergo\" control={<Radio />} label=\"Albergo\" />\n    </RadioGroup>\n\n    <h2 style={{margin:'16px'}}>Dove vuoi costruire?</h2>\n    <Grid container direction=\"column\">\n      <TextField variant=\"outlined\" style={{margin:'16px', width:'350px'}} onChange={handleChangeTerreno}/>\n    \n      <Button variant=\"contained\" style={{margin:'16px', width:'350px'}} onClick={() => CostruisciEdificio()}>\n        Costruisci questo edificio\n      </Button>\n   \n    </Grid>\n    \n    \n    \n  </Paper>\n);\n\n\n\n\n\nreturn(\n<div>\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\n    Costruisci\n  </Button>\n  <Modal open={openModal} onClose={handleClose}>\n    {body}\n  </Modal>\n</div>\n);\n}\nexport default Costruisci;","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Acquista.js",["139","140","141","142","143","144","145","146","147","148","149"],"import React from 'react';\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\n\n\nfunction Acquista(props){\n\nconst [openModal, setOpenModal] = React.useState(false);\nconst handleOpen = () => { setOpenModal(true) };\nconst handleClose = () => { setOpenModal(false) };\n\nconst acquistaProprieta = () => {\n  if (props.caselle[props.attualeCasella].tipo=='terreno') { acquistaTerreno(); }\n  if (props.caselle[props.attualeCasella].tipo=='societa') { acquistaSocieta(); }\n  if (props.caselle[props.attualeCasella].tipo=='stazione') { acquistaStazioni(); }\n}\n\nconst acquistaTerreno = () => { \n  var nuoviTerreni = props.terreni;\n  var nuoviGiocatori = props.giocatori;\n  var nuoveCaselle = props.caselle;\n\n  var vecchioCapitale = nuoviGiocatori[props.turnoGiocatore].capitale;\n  var nuovoCapitale;\n\n  var i;\n  for (i = 0; i < props.terreni.length; i++) {\n    // Se la casella √® un terreno trovo il nome nel array terreni\n    // Join tra gli array per NOME\n    // Se il giocatore ha abbastanza soldi procede con l'acquisto\n    // Se il nome della casella di tipo terreno corrisponde al nome nell'array terreni\n    // allora aggiorno il proprietario Sia in array Terreni sia in array Caselle    \n    if (props.terreni[i].nome==props.caselle[props.attualeCasella].nome) {\n      if (props.terreni[i].valore<=vecchioCapitale) {\n      // Aggiorno array terreni\n      nuoviTerreni[i].proprietario=props.turnoGiocatore;\n      props.setTerreni(nuoviTerreni);  \n      // Aggiorno array giocatori\n      nuovoCapitale = vecchioCapitale-props.terreni[i].valore;\n      nuoviGiocatori[props.turnoGiocatore].capitale=nuovoCapitale;\n      props.setGiocatori(nuoviGiocatori);\n      // Aggiorno array caselle\n      nuoveCaselle[props.attualeCasella].proprietario=props.turnoGiocatore;\n      props.setCaselle(nuoveCaselle);\n      alert('Terreno acquisito casella:'+props.attualeCasella); \n     } else {\n      alert('Non hai abbastanza soldi'); \n     }\n    }\n  }\n  \n};\n\nconst acquistaSocieta = () => { \n  alert('da fare'); \n}\n\nconst acquistaStazioni = () => { \n  alert('da fare'); \n}\n\nconst body = (\n    <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\n        \n      <h4 style={{margin:'16px'}}>Giocatore {props.turnoGiocatore} sei sulla casella {props.attualeCasella}</h4>\n      <h4 style={{margin:'16px'}}>Di tipo: {props.caselle[props.attualeCasella].tipo}</h4> \n      <h4 style={{margin:'16px'}}>Di nome: {props.caselle[props.attualeCasella].nome}</h4> \n      <h4 style={{margin:'16px'}}>Proprietario: {props.caselle[props.attualeCasella].proprietario}</h4>\n      \n      {(props.caselle[props.attualeCasella].proprietario==-1 && \n         (props.caselle[props.attualeCasella].tipo=='terreno'\n          ||\n          props.caselle[props.attualeCasella].tipo=='societa'\n          ||\n          props.caselle[props.attualeCasella].tipo=='stazione')\n        )?     \n          <Button variant=\"contained\" style={{margin:'16px'}} onClick={() => acquistaProprieta()}>\n          Acquista\n          </Button> : \n          <h4 style={{margin:'16px'}}>non lo puoi acquistare</h4>  }\n      \n    </Paper>\n  );\n\n    return(\n        <div>\n          <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" style={{marginLeft:'5px'}}>\n          Acquista\n          </Button>\n          <Modal open={openModal} onClose={handleClose}>\n            {body}\n          </Modal>\n        </div>\n        );\n        }\n\nexport default Acquista;","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\VendiEdificio.js",["150","151"],"import React from 'react';\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel, TextField, Grid} from '@material-ui/core';\n\n\nfunction VendiEdificio(props){\n\n    \n\n    \n\n//Stato del Modale utilizato per costruire un edificio\nconst [openModal, setOpenModal] = React.useState(false);\nconst handleOpen = () => { setOpenModal(true) };\nconst handleClose = () => { setOpenModal(false) };\n\n//Stato del RadioGrup casaAlbergo usato per scegliere la tipologia di edificio da costruire\nconst [edificio, setEdificio] = React.useState('casa');\nconst handleChangeTipoDiEdificio = (event) => { setEdificio(event.target.value) };\n\n//Stato del RadioGrup terreno usato per scegliere il terreno su cui costruire l'edificio\nconst [terreno, setTerreno] = React.useState(1);\nconst handleChangeTerreno = (event) => {\n  setTerreno(event.target.value);\n};\n\nfunction EsisteTerreno(){\n  var i = 0;\n  var esiste = false;\n  var n;\n  while(i < props.terreni.length){\n    if(terreno === props.terreni[i].nome){\n      esiste = true;\n      n = i;\n      i = 100;\n    }\n    else{\n      i++;\n    }\n  }\n  if(esiste){\n    return(n);\n  }\n  else{\n    return(-1);\n  }\n}\n\n\n\n\nfunction VendiCasa(){\n  //verifico che il terreno esista e salvo il risultato in propriet√†\n  var n = EsisteTerreno();\n  if(n === -1){\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.terreni[n];\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\n    alert('Non puoi vendere gli edifici se il terreno che non √® tuo');\n    return;\n  }\n  \n  //Se sul terreno non ci sono case non ho nulla da vendere\n  if(propriet√†.case === 0){\n    alert(\"Su questo terreno non ci sono case\");\n    return;\n  }\n  //modifico l'array terreni e l'array giocatori\n  propriet√†.case = propriet√†.case - 1;\n  console.log(propriet√†);\n  var nuoviTerreni = props.terreni;\n  nuoviTerreni[n] = propriet√†;\n  props.setTerreni(nuoviTerreni);\n  console.log(props.terreni);\n\n  var nuoviGiocatori = props.giocatori;\n  var guadagno = propriet√†.valore*3/8;\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\n  props.setGiocatori(nuoviGiocatori);\n  console.log(props.giocatori);\n\n  alert('La vendita della casa √® andata a buon fine');\n\n}\n\nfunction VendiAlbergo(){\n  //verifico che il terreno esista e salvo il risultato in propriet√†\n  var n = EsisteTerreno();\n  if(n === -1){\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.terreni[n];\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\n    alert('Non puoi vendere gli edifici che non sono su un tuo terreno');\n    return;\n  }\n  //Verifico ceh sul terreno ci sia un albergo\n  if(!(propriet√†.alberghi === 1)){\n    alert(\"Su questo terreno non c'√® un albergo\");\n    return;\n  }\n  \n  \n  //modifico l'array terreni e l'array giocatori\n  //quando vendo un albergo alla banca ricevo in cambio met√† del prezzo d'aquisto e 4 case\n  propriet√†.alberghi = 0;\n  propriet√†.case = 4;\n  console.log(propriet√†);\n  var nuoviTerreni = props.terreni;\n  nuoviTerreni[n] = propriet√†;\n  props.setTerreni(nuoviTerreni);\n  console.log(props.terreni);\n\n  var nuoviGiocatori = props.giocatori;\n  var guadagno = propriet√†.valore*3/8;\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\n  props.setGiocatori(nuoviGiocatori);\n  console.log(props.giocatori);\n\n  alert(\"La vendita dell'albergo √® andata a buon fine\");\n\n}\n\nfunction VendiEdificio(){\n  if(edificio === 'casa'){\n    VendiCasa();\n  }\n  else{\n    VendiAlbergo();\n  }\n  \n}\n\nconst body = (\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\n      \n    <h2 style={{margin:'16px'}}>Cosa vuoi vendere?</h2>\n    <RadioGroup value={edificio} onChange={handleChangeTipoDiEdificio} style={{margin:'16px'}}>\n        <FormControlLabel value=\"casa\" control={<Radio />} label=\"Casa\" />\n        <FormControlLabel value=\"albergo\" control={<Radio />} label=\"Albergo\" />\n    </RadioGroup>\n\n    <h2 style={{margin:'16px'}}>Dove si trova questo edificio?</h2>\n    <Grid container direction=\"column\">\n      <TextField variant=\"outlined\" style={{margin:'16px', width:'350px'}} onChange={handleChangeTerreno}/>\n    \n      <Button variant=\"contained\" style={{margin:'16px', width:'350px'}} onClick={() => VendiEdificio()}>\n        vendi questo edificio\n      </Button>\n   \n    </Grid>\n    \n    \n    \n  </Paper>\n);\n\n\n\n\n\nreturn(\n<div>\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\n    Vendi edificio\n  </Button>\n  <Modal open={openModal} onClose={handleClose}>\n    {body}\n  </Modal>\n</div>\n);\n}\nexport default VendiEdificio;","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Vendi.js",["152","153"],"import React from 'react';\nimport {Paper, Modal, Button, Grid, TextField, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\n\n\nfunction Vendi(props){\n\n    \n  \n    \n\n//Stato del Modale utilizato per costruire un edificio\nconst [openModal, setOpenModal] = React.useState(false);\nconst handleOpen = () => { setOpenModal(true) };\nconst handleClose = () => { setOpenModal(false) };\n\n\n//Stato del terreno da vendere\nconst [terreno, setTerreno] = React.useState('');\nconst handleChangeTerreno = (event) => {\n  setTerreno(event.target.value);\n};\n\n//Stato del gicatore che vuole vendere\nconst [venditore, setVenditore] = React.useState('');\nconst handleChangeVenditore = (event) => {\n  setVenditore(event.target.value);\n};\n\n//Stato del gicatore che vuole comprare, eventualmente la banca\nconst [aquirente, setAquirente] = React.useState('');\nconst handleChangeAquirente = (event) => {\n  setAquirente(event.target.value);\n};\n\n//Stato del prezzo a cui viene venduta la propriet√†\nconst [prezzo, setPrezzo] = React.useState('');\nconst handleChangePrezzo = (event) => {\n  setPrezzo(event.target.value);\n};\n\n\n\nfunction EsisteTerreno(){\n  var i = 0;\n  var esiste = false;\n  var n;\n  while(i < props.terreni.length){\n    if(terreno === props.terreni[i].nome){\n      esiste = true;\n      n = i;\n      i = 100;\n    }\n    else{\n      i++;\n    }\n  }\n  if(esiste){\n    return(n);\n  }\n  else{\n    return(-1);\n  }\n}\n\nfunction EsisteSociet√†Stazione(){\n  var i = 0;\n  var esiste = false;\n  var n;\n  while(i < props.societ√†Stazioni.length){\n    if(terreno === props.societ√†Stazioni[i].nome){\n      esiste = true;\n      n = i;\n      i = 100;\n    }\n    else{\n      i++;\n    }\n  }\n  if(esiste){\n    return(n);\n  }\n  else{\n    return(-1);\n  }\n}\n\nfunction EsisteGiocatore(nome){\n  \n  var i = 0;\n  while(i < props.giocatori.length){\n    if(nome === props.giocatori[i].nome){\n     return(i); \n    }\n    else{\n      i++;\n    }\n  }\n  return(-1);\n\n}\n\nfunction VendiTerreno(){\n\n  //verifico che il terreno esista e salvo il risultato in propriet√†\n  var n = EsisteTerreno();\n  \n  if(n === -1){\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.terreni[n];\n  \n  if(!(propriet√†.proprietario == venditore)){\n    alert('Non puoi vendere qualcosa che non ti appartiene');\n    return;\n  }\n  //verifico che il venditore esista e che non sia la banca\n  var y = EsisteGiocatore(venditore);\n  if(y === -1){\n    alert('Controlla che il nome del venditore sia scritto in modo corretto');\n    return;\n  }\n  var venditore2 = props.giocatori[y];\n  if(venditore2.inGioco === false){\n    alert('Hai inserito un venditore che non √® pi√π in gioco');\n    return;\n  }\n \n  \n  //verifico che l'aquirente esista\n  var x = EsisteGiocatore(aquirente);\n  var aquirente2;\n  if(x === -1){\n    alert(\"Controlla che il nome dell'aquirente sia scritto in modo corretto\");\n    return;\n  }\n  aquirente2 = props.giocatori[x];\n  if(aquirente2.inGioco === false){\n    alert('Hai inserito un aquirente che non √® pi√π in gioco');\n    return;\n  }\n  //verifico che sul terreno non ci siano ne case ne alberghi\n  if(propriet√†.case > 0 || propriet√†.alberghi > 0){\n    alert('Non puoi vendere un terreno con case o alberghi');\n    return;\n  }\n  //Verifico che venditore e aquirente non siano lo stesso giocatore\n  if(venditore2 === aquirente2){\n    alert('Non puoi vendere a te stesso');\n    return;\n  }\n  \n  //verifico che il prezzo sia > 0\n  if(prezzo <= 0){\n    alert('Controlla di aver inserito un prezzo maggiore di zero');\n    return;\n  }\n  //sposto i soldi dall'aquirente2 al venditore2\n  if(prezzo > 0){\n    aquirente2.capitale = aquirente2.capitale - parseInt(prezzo);\n    venditore2.capitale = venditore2.capitale + parseInt(prezzo);\n  }\n  //aquirente diventa il nuovo proprietario della propriet√†\n  propriet√†.proprietario = aquirente2.nome;\n  \n  //aggiorno le variabili di stato che contengono l'elenco dei terreni e dei giocatori\n  var nuoviTerreni = props.terreni;\n  nuoviTerreni[n] = propriet√†;  \n  props.setTerreni(nuoviTerreni);  \n  \n  var nuoviGiocatori = props.giocatori;\n  nuoviGiocatori[x] = aquirente2;\n  nuoviGiocatori[y] = venditore2;\n  props.setGiocatori(nuoviGiocatori);\n\n  console.log(props.giocatori);\n  console.log(props.terreni);\n\n  alert('La vendita √® andata a buon fine');\n}\n\nfunction VendiStazioneSociet√†(){\n\n  //verifico che la societ√† / stazione esista e salvo il risultato in propriet√†\n  var n = EsisteSociet√†Stazione();\n  \n  if(n === -1){\n    alert('Controlla che il nome della societ√† o della stazione sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.societ√†Stazioni[n];\n  \n  if(!(propriet√†.proprietario == venditore)){\n    alert('Non puoi vendere qualcosa che non ti appartiene');\n    return;\n  }\n  //verifico che il venditore esista \n  var y = EsisteGiocatore(venditore);\n  if(y === -1){\n    alert('Controlla che il nome del venditore sia scritto in modo corretto');\n    return;\n  }\n  var venditore2 = props.giocatori[y];\n  if(venditore2.inGioco === false){\n    alert('Hai inserito un venditore che non √® pi√π in gioco');\n    return;\n  }\n \n  \n  //verifico che l'aquirente esista\n  var x = EsisteGiocatore(aquirente);\n  var aquirente2;\n  if(x === -1){\n    alert(\"Controlla che il nome dell'aquirente sia scritto in modo corretto\");\n    return;\n  }\n  aquirente2 = props.giocatori[x];\n  if(aquirente2.inGioco === false){\n    alert('Hai inserito un aquirente che non √® pi√π in gioco');\n    return;\n  }\n  \n  //Verifico che venditore e aquirente non siano lo stesso giocatore\n  if(venditore2 === aquirente2){\n    alert('Non puoi vendere a te stesso');\n    return;\n  }\n  \n  //verifico che il prezzo sia > 0\n  if(prezzo <= 0){\n    alert('Controlla di aver inserito un prezzo maggiore di zero');\n    return;\n  }\n  //sposto i soldi dall'aquirente2 al venditore2\n  if(prezzo > 0){\n    aquirente2.capitale = aquirente2.capitale - parseInt(prezzo);\n    venditore2.capitale = venditore2.capitale + parseInt(prezzo);\n  }\n  //aquirente diventa il nuovo proprietario della propriet√†\n  propriet√†.proprietario = aquirente2.nome;\n  \n  //aggiorno le variabili di stato che contengono l'elenco delle societ√†, delle stazioni e dei giocatori\n  var nuoveSociet√†Stazioni = props.societ√†Stazioni;\n  nuoveSociet√†Stazioni[n] = propriet√†;  \n  props.setSociet√†Stazioni(nuoveSociet√†Stazioni);  \n  \n  var nuoviGiocatori = props.giocatori;\n  nuoviGiocatori[x] = aquirente2;\n  nuoviGiocatori[y] = venditore2;\n  props.setGiocatori(nuoviGiocatori);\n\n  console.log(props.giocatori);\n  console.log(props.societ√†Stazioni);\n\n  alert('La vendita √® andata a buon fine');\n}\n\n\n\n//Stato del RadioGrup per la gerstione del tipo di vendita\n//si pu√≤ scegliere se vendere terreni o stazioni/societ√†\nconst [tipoVendita, setTipoVendita] = React.useState('Terreno');\nconst handleChangeTipoVendita = (event) => { setTipoVendita(event.target.value) };\n\nfunction Vendita(){\n  \n  if(tipoVendita === 'Terreno'){\n    VendiTerreno();\n  }\n  else{\n    VendiStazioneSociet√†();\n  }\n}\n\nconst body = (\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\n      \n    <h2 style={{margin:'16px'}}>Cosa vuoi vendere</h2>\n    <RadioGroup value={tipoVendita} onChange={handleChangeTipoVendita} style={{margin:'16px'}}>\n        <FormControlLabel value=\"Terreno\" control={<Radio />} label=\"Terreno\" />\n        <FormControlLabel value=\"StazioneSociet√†\" control={<Radio />} label=\"Stazione o Societ√†\" />\n    </RadioGroup>\n    \n    <Grid container direction=\"column\">\n      <Grid container directio=\"row\" alignItems=\"center\">\n        <h3 style={{margin:'16px'}}>Inserisci il nome della casella che vuoi vendere</h3>\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'32px', width:'350px'}} onChange={handleChangeTerreno}/>\n      </Grid>\n      <Grid container directio=\"row\" alignItems=\"center\">\n        <h3 style={{margin:'16px'}}>Nome del venditore</h3>\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'265px', width:'350px'}} onChange={handleChangeVenditore}/>\n      </Grid>\n      <Grid container directio=\"row\" alignItems=\"center\">\n        <h3 style={{margin:'16px'}}>Nome dell'aquirente</h3>\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'259px', width:'350px'}} onChange={handleChangeAquirente}/>\n      </Grid>\n      <Grid container directio=\"row\" alignItems=\"center\">\n        <h3 style={{margin:'16px'}}>Quanto dovr√† pagare?</h3>\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'246px', width:'350px'}} onChange={handleChangePrezzo}/>\n      </Grid>\n      <Button variant=\"contained\" style={{margin:'16px', width:'100px'}} onClick={() => Vendita()} >\n        Vendi\n      </Button>\n    </Grid>\n\n    \n       \n  </Paper>\n);\n\n\n\nreturn(\n<div>\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\n    Vendi\n  </Button>\n  <Modal open={openModal} onClose={handleClose}>\n    {body}\n  </Modal>\n</div>\n);\n}\nexport default Vendi;","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Ipoteca.js",["154","155","156","157"],"import React from 'react';\nimport {Paper, Modal, Button, Grid, TextField, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\n\n\nfunction Ipoteca(props){\n\n    \n  \n    \n\n//Stato del Modale utilizato per costruire un edificio\nconst [openModal, setOpenModal] = React.useState(false);\nconst handleOpen = () => { setOpenModal(true) };\nconst handleClose = () => { setOpenModal(false) };\n\n\n//Stato del terreno da vendere\nconst [terreno, setTerreno] = React.useState('');\nconst handleChangeTerreno = (event) => {\n  setTerreno(event.target.value);\n};\n\n//Stato del RadioGrup per la gerstione del tipo di vendita\n//si pu√≤ scegliere se vendere terreni o stazioni/societ√†\nconst [tipoVendita, setTipoVendita] = React.useState('Terreno');\nconst handleChangeTipoVendita = (event) => { setTipoVendita(event.target.value) };\n\n\n//Stato del RadioGrup per la gerstione dell'azione da svolgere\n//si pu√≤ scegliere tra ipotecare o riscattare l'ipoteca\nconst [azione, setAzione] = React.useState('Ipoteca');\nconst handleChangeAzione = (event) => { setAzione(event.target.value) };\n\n\n\n\nfunction EsisteTerreno(){\n  var i = 0;\n  var esiste = false;\n  var n;\n  while(i < props.terreni.length){\n    if(terreno === props.terreni[i].nome){\n      esiste = true;\n      n = i;\n      i = 100;\n    }\n    else{\n      i++;\n    }\n  }\n  if(esiste){\n    return(n);\n  }\n  else{\n    return(-1);\n  }\n}\n\nfunction EsisteSociet√†Stazione(){\n  var i = 0;\n  var esiste = false;\n  var n;\n  while(i < props.societ√†Stazioni.length){\n    if(terreno === props.societ√†Stazioni[i].nome){\n      esiste = true;\n      n = i;\n      i = 100;\n    }\n    else{\n      i++;\n    }\n  }\n  if(esiste){\n    return(n);\n  }\n  else{\n    return(-1);\n  }\n}\n\n\nfunction IpotecaTerreno(){\n\n  //verifico che il terreno esista e salvo il risultato in propriet√†\n  var n = EsisteTerreno();\n  \n  if(n === -1){\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.terreni[n];\n  \n \n  //verifico che sul terreno non ci siano ne case ne alberghi\n  if(propriet√†.case > 0 || propriet√†.alberghi > 0){\n    alert('Non puoi ipotecare un terreno con case o alberghi');\n    return;\n  }\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\n    alert('Non puoi ipotecare una propriet√† che non ti appartiene');\n    return;\n  }\n  \n  //modifico l'array terreni e l'array giocatori\n  propriet√†.ipotecato = true;\n  console.log(propriet√†);\n  var nuoviTerreni = props.terreni;\n  nuoviTerreni[n] = propriet√†;\n  props.setTerreni(nuoviTerreni);\n  console.log(props.terreni);\n\n  var nuoviGiocatori = props.giocatori;\n  var guadagno = propriet√†.valore/2;\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\n  props.setGiocatori(nuoviGiocatori);\n  console.log(props.giocatori);\n\n  alert('Questa propriet√† √® stata ipotecata');\n}\n\nfunction IpotecaStazioneSociet√†(){\n\n  //verifico che la societ√† / stazione esista e salvo il risultato in propriet√†\n  var n = EsisteSociet√†Stazione();\n  \n  if(n === -1){\n    alert('Controlla che il nome della societ√† o della stazione sia scritto in modo corretto');\n    return;\n  }\n  var propriet√† = props.societ√†Stazioni[n];\n  \n  //verifico che il turnoGiocatore sia proprietario di propriet√†\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\n    alert('Non puoi Ipotecare una propriet√† che non ti appartiene');\n    return;\n  }\n   \n  //modifico l'array terreni e l'array giocatori\n  propriet√†.ipotecato = true;\n  console.log(propriet√†);\n  var nuoveSociet√†Stazioni = props.societ√†Stazioni;\n  nuoveSociet√†Stazioni[n] = propriet√†;\n  props.setSociet√†Stazioni(nuoveSociet√†Stazioni);\n  console.log(props.societ√†Stazioni);\n\n  var nuoviGiocatori = props.giocatori;\n  var guadagno = propriet√†.valore/2;\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\n  props.setGiocatori(nuoviGiocatori);\n  console.log(props.giocatori);\n\n  alert('Questa propriet√† √® stata ipotecata');\n\n \n}\n\n\nfunction Ipoteca(){\n  \n    if(tipoVendita === 'Terreno'){\n      IpotecaTerreno();\n    }\n    else{\n      IpotecaStazioneSociet√†();\n    }\n  }\n\n\n  \nfunction RiscattaTerreno(){\n\n    //verifico che il terreno esista e salvo il risultato in propriet√†\n    var n = EsisteTerreno();\n    \n    if(n === -1){\n      alert('Controlla che il nome del terreno sia scritto in modo corretto');\n      return;\n    }\n    var propriet√† = props.terreni[n];\n    \n   \n    //verifico  il terreno sia ipotecato\n    if(propriet√†.ipotecato === false){\n      alert('Non puoi riscattare un terreno che non √® ipotecato');\n      return;\n    }\n    //verifico che il turnoGiocatore sia proprietario di propriet√†\n    if(!(propriet√†.proprietario == props.turnoGiocatore)){\n      alert('Non puoi Ipotecare una propriet√† che non ti appartiene');\n      return;\n    }\n    \n    //modifico l'array terreni e l'array giocatori\n    propriet√†.ipotecato = false;\n    console.log(propriet√†);\n    var nuoviTerreni = props.terreni;\n    nuoviTerreni[n] = propriet√†;\n    props.setTerreni(nuoviTerreni);\n    console.log(props.terreni);\n  \n    var nuoviGiocatori = props.giocatori;\n    var spesa = (propriet√†.valore/2) +(propriet√†.valore/10);\n    nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - spesa;\n    props.setGiocatori(nuoviGiocatori);\n    console.log(props.giocatori);\n  \n    alert(\"L'ipoteca su questa propriet√† √® stata riscattata con successo\");\n  }\n  \n  function RiscattaStazioneSociet√†(){\n  \n    //verifico che la societ√† / stazione esista e salvo il risultato in propriet√†\n    var n = EsisteSociet√†Stazione();\n    \n    if(n === -1){\n      alert('Controlla che il nome della societ√† o della stazione sia scritto in modo corretto');\n      return;\n    }\n    var propriet√† = props.societ√†Stazioni[n];\n    \n    //verifico che il turnoGiocatore sia proprietario di propriet√†\n    if(!(propriet√†.proprietario == props.turnoGiocatore)){\n      alert('Non puoi Ipotecare una propriet√† che non ti appartiene');\n      return;\n    }\n    //verifico  la societ√†/stazione sia ipotecata\n    if(propriet√†.ipotecato === false){\n        alert('Non puoi riscattare una societ√† o una stazione che non √® ipotecata');\n        return;\n      }\n     \n    //modifico l'array terreni e l'array giocatori\n    propriet√†.ipotecato = false;\n    console.log(propriet√†);\n    var nuoveSociet√†Stazioni = props.societ√†Stazioni;\n    nuoveSociet√†Stazioni[n] = propriet√†;\n    props.setSociet√†Stazioni(nuoveSociet√†Stazioni);\n    console.log(props.societ√†Stazioni);\n  \n    var nuoviGiocatori = props.giocatori;\n    var spesa = (propriet√†.valore/2) + (propriet√†.valore/10);\n    nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - spesa;\n    props.setGiocatori(nuoviGiocatori);\n    console.log(props.giocatori);\n  \n    alert(\"L'ipoteca su questa propriet√† √® stata riscattata con successo\");\n  \n   \n  }\n  \n  \n  function Riscatta(){\n    \n      if(tipoVendita === 'Terreno'){\n        RiscattaTerreno();\n      }\n      else{\n        RiscattaStazioneSociet√†();\n      }\n    }\n  \n\n\n\nconst body = (\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\n\n     <h2 style={{margin:'16px'}}>Che azione vuoi svolgere</h2>\n    <RadioGroup value={azione} onChange={handleChangeAzione} style={{margin:'16px'}}>\n        <FormControlLabel value=\"Ipotecare\" control={<Radio />} label=\"Ipotecare\" />\n        <FormControlLabel value=\"Riscattare\" control={<Radio />} label=\"Riscattare\" />\n    </RadioGroup>\n\n    <h2 style={{margin:'16px'}}>Su quale propriet√†?</h2>\n    <RadioGroup value={tipoVendita} onChange={handleChangeTipoVendita} style={{margin:'16px'}}>\n        <FormControlLabel value=\"Terreno\" control={<Radio />} label=\"Terreno\" />\n        <FormControlLabel value=\"StazioneSociet√†\" control={<Radio />} label=\"Stazione o Societ√†\" />\n    </RadioGroup>\n    \n    <Grid container direction=\"column\">\n      <Grid container directio=\"row\" alignItems=\"center\">\n        <h3 style={{margin:'16px'}}>Inserisci il nome della casella che vuoi ipotecare o riscattare</h3>\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'32px', width:'350px'}} onChange={handleChangeTerreno}/>\n      </Grid>\n      \n      \n      {azione==='Ipotecare'?\n      <Button variant=\"contained\" style={{margin:'16px', width:'100px'}} onClick={() => Ipoteca()} >\n        ipoteca\n      </Button>\n      :\n      <Button variant=\"contained\" style={{margin:'16px', width:'200px'}} onClick={() => Riscatta()} >\n        Riscatta ipoteca\n      </Button>\n      }\n    </Grid>\n\n    \n       \n  </Paper>\n);\n\n\n\nreturn(\n<div>\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\n    Ipoteca\n  </Button>\n  <Modal open={openModal} onClose={handleClose}>\n    {body}\n  </Modal>\n</div>\n);\n}\nexport default Ipoteca;","E:\\Monopoly\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\CarteProbabilitaImprevisto\\Carte.js",["158"],"import React, { Component } from 'react';\nimport Banca from '../Banca';\n\nclass Carte extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //carta = [Numero carta, Descrizione, Somma di denaro, Somma per ogni casa, Somma per ogni albergo, Somma per ogni giocatore]\n            carte: [\n                //Probabilit√†\n                [0, 'Serata della Grande Opera: incassa $50 da ogni giocaotore', 0, 0, 0, 50],\n                [1, 'Errore della banca: incassa $200', 200, 0, 0, 0],\n                [2, 'Parcella del medico: paga $50', -50, 0, 0, 0],\n                [3, 'Rimborso della imposta sul reddito: incassa $20', 20, 0, 0, 0],\n                [4, 'Rendimento assicurazione sulla vita: incassa $100', 100, 0, 0, 0],\n                [5, 'Paga le spese mediche ospedaliere: paga $50', -50, 0, 0, 0],\n                [6, 'Paga le tasse scolastiche: paga $50', -50, 0, 0, 0],\n                [7, 'Commisione consulenza: incassa $25', 25, 0, 0, 0],\n                [8, 'Hai vinto il secondo posto in una gara di bellezza: incassa $10', 10, 0, 0, 0],\n                [9, 'Eredit√†: incassa $100', 100, 0, 0, 0],\n                [10, 'Vendita di azioni: incassa $100', 100, 0, 0, 0],\n                [11, 'Rendimento fondo vacanze: incassa $100', 100, 0, 0, 0],\n                [12, 'Sei stato tassato per le riparazioni in questa strada: paga $45 per casa e $115 per hotel', 0, -45, -115, 0],\n                [13, 'Esci di Prigione', 0, 0, 0, 0],\n                [14, 'Vai in Prigione senza passare dal Via', 0, 0, 0, 0],\n                [15, 'Vai al Via', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\n\n                //Imprevisti\n                [16, 'Esci di Prigione', 0, 0, 0, 0],\n                [17, 'Vai al Via', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\n                [18, 'Vai a Illinois Avenue', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$ IN CASO SI PASSI DAL VIA, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\n                [19, 'Vai a St. Charles Place', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$ IN CASO SI PASSI DAL VIA, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\n                [20, 'La Banca paga un dividendo: incassi $50', 50, 0, 0, 0],\n                [21, 'Vai indietro di 3 caselle', 0, 0, 0, 0],\n                [22, 'Vai in Prigione senza passare dal Via', 0, 0, 0, 0],\n                [23, 'Riparazioni generali a tutte le tue propriet√†: paga $25 per casa e $100 per hotel', 0, -25, -100, 0],\n                [24, 'Paga tasse scadute: paga $10', -10, 0, 0, 0],\n                [25, 'Vai a Reading Railroad', 0, 0, 0, 0],\n                [26, 'Vai a Boardwalk', 0, 0, 0, 0],\n                [27, 'Sei eletto chairman della tavola da gioco: paga $50 da ogni giocaotore', 0, 0, 0, -50],\n                [28, 'Rendimento prestito immobiliare: incassa $150', 150, 0, 0, 0],\n                [29, 'Muovi la pedina al prossimo Utility, se non ha proprietario puoi comprarlo, se lo ha tira i dadi e paga 10 volte il risultato del lancio', 0, 0, 0, 0],\n                [30, 'Muovi la pedina alla prossimo Stazione, se non ha proprietario puoi comprarla, se lo ha paga il doppio del noleggio', 0, 0, 0, 0],\n                [31, 'Hai vinto una competizione di cruciverba: incassa $100', 100, 0, 0, 0],\n\n            ]\n        }\n    }\n\n\n    \n    estraiCarta = (probabilitaOImprevisto, giocatore) => { //probabilit√†==true imprevisto==false\n        let idCarta;\n        if (probabilitaOImprevisto){\n            idCarta = Math.floor(Math.random()*(15));\n        }else{\n            idCarta = Math.floor(Math.random()*(31-16)+16);\n        };\n        this.attivaCarta(idCarta, giocatore);\n    }\n\n    \n    attivaCarta = (idCarta, giocatore) => {\n        //  TODO\n        alert('Giocatore: ' + giocatore + ' \\n La carta √®: ' + this.state.carte[idCarta][1]);\n        if (this.state.carte[idCarta][2] != 0){\n             <Banca saldoContoGiocatori={() => this.props.modificaSaldo(this.state.carte[idCarta][2], giocatore)}/>\n        }\n    }\n}\nexport default Carte;",{"ruleId":"159","severity":1,"message":"160","line":4,"column":8,"nodeType":"161","messageId":"162","endLine":4,"endColumn":11},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"159","severity":1,"message":"167","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":39,"column":17,"nodeType":"170","endLine":39,"endColumn":117},{"ruleId":"159","severity":1,"message":"160","line":4,"column":8,"nodeType":"161","messageId":"162","endLine":4,"endColumn":11},{"ruleId":"159","severity":1,"message":"171","line":93,"column":53,"nodeType":"161","messageId":"162","endLine":93,"endColumn":65},{"ruleId":"172","severity":1,"message":"173","line":102,"column":13,"nodeType":"174","messageId":"175","endLine":119,"endColumn":14},{"ruleId":"176","severity":1,"message":"177","line":140,"column":21,"nodeType":"178","endLine":140,"endColumn":51},{"ruleId":"159","severity":1,"message":"179","line":3,"column":8,"nodeType":"161","messageId":"162","endLine":3,"endColumn":11},{"ruleId":"159","severity":1,"message":"180","line":4,"column":8,"nodeType":"161","messageId":"162","endLine":4,"endColumn":12},{"ruleId":"159","severity":1,"message":"181","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":11},{"ruleId":"159","severity":1,"message":"182","line":6,"column":8,"nodeType":"161","messageId":"162","endLine":6,"endColumn":12},{"ruleId":"159","severity":1,"message":"183","line":7,"column":8,"nodeType":"161","messageId":"162","endLine":7,"endColumn":13},{"ruleId":"159","severity":1,"message":"184","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":12},{"ruleId":"159","severity":1,"message":"185","line":9,"column":8,"nodeType":"161","messageId":"162","endLine":9,"endColumn":15},{"ruleId":"159","severity":1,"message":"186","line":10,"column":8,"nodeType":"161","messageId":"162","endLine":10,"endColumn":19},{"ruleId":"187","severity":1,"message":"188","line":18,"column":39,"nodeType":"189","messageId":"190","endLine":18,"endColumn":40},{"ruleId":"191","severity":1,"message":"192","line":25,"column":13,"nodeType":"193","endLine":25,"endColumn":40},{"ruleId":"159","severity":1,"message":"194","line":88,"column":14,"nodeType":"161","messageId":"162","endLine":88,"endColumn":15},{"ruleId":"159","severity":1,"message":"195","line":88,"column":17,"nodeType":"161","messageId":"162","endLine":88,"endColumn":30},{"ruleId":"159","severity":1,"message":"196","line":88,"column":32,"nodeType":"161","messageId":"162","endLine":88,"endColumn":45},{"ruleId":"159","severity":1,"message":"171","line":88,"column":47,"nodeType":"161","messageId":"162","endLine":88,"endColumn":59},{"ruleId":"159","severity":1,"message":"197","line":88,"column":61,"nodeType":"161","messageId":"162","endLine":88,"endColumn":67},{"ruleId":"198","severity":1,"message":"199","line":117,"column":89,"nodeType":"200","messageId":"201","endLine":117,"endColumn":90},{"ruleId":"159","severity":1,"message":"202","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"204","line":75,"column":31,"nodeType":"200","messageId":"205","endLine":75,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":127,"column":31,"nodeType":"200","messageId":"205","endLine":127,"endColumn":33},{"ruleId":"159","severity":1,"message":"206","line":2,"column":31,"nodeType":"161","messageId":"162","endLine":2,"endColumn":36},{"ruleId":"159","severity":1,"message":"207","line":2,"column":38,"nodeType":"161","messageId":"162","endLine":2,"endColumn":48},{"ruleId":"159","severity":1,"message":"208","line":2,"column":50,"nodeType":"161","messageId":"162","endLine":2,"endColumn":66},{"ruleId":"203","severity":1,"message":"204","line":12,"column":47,"nodeType":"200","messageId":"205","endLine":12,"endColumn":49},{"ruleId":"203","severity":1,"message":"204","line":13,"column":47,"nodeType":"200","messageId":"205","endLine":13,"endColumn":49},{"ruleId":"203","severity":1,"message":"204","line":14,"column":47,"nodeType":"200","messageId":"205","endLine":14,"endColumn":49},{"ruleId":"203","severity":1,"message":"204","line":32,"column":30,"nodeType":"200","messageId":"205","endLine":32,"endColumn":32},{"ruleId":"203","severity":1,"message":"204","line":69,"column":57,"nodeType":"200","messageId":"205","endLine":69,"endColumn":59},{"ruleId":"203","severity":1,"message":"204","line":70,"column":51,"nodeType":"200","messageId":"205","endLine":70,"endColumn":53},{"ruleId":"203","severity":1,"message":"204","line":72,"column":51,"nodeType":"200","messageId":"205","endLine":72,"endColumn":53},{"ruleId":"203","severity":1,"message":"204","line":74,"column":51,"nodeType":"200","messageId":"205","endLine":74,"endColumn":53},{"ruleId":"203","severity":1,"message":"204","line":60,"column":31,"nodeType":"200","messageId":"205","endLine":60,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":97,"column":31,"nodeType":"200","messageId":"205","endLine":97,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":113,"column":31,"nodeType":"200","messageId":"205","endLine":113,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":193,"column":31,"nodeType":"200","messageId":"205","endLine":193,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":100,"column":31,"nodeType":"200","messageId":"205","endLine":100,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":134,"column":31,"nodeType":"200","messageId":"205","endLine":134,"endColumn":33},{"ruleId":"203","severity":1,"message":"204","line":189,"column":33,"nodeType":"200","messageId":"205","endLine":189,"endColumn":35},{"ruleId":"203","severity":1,"message":"204","line":223,"column":33,"nodeType":"200","messageId":"205","endLine":223,"endColumn":35},{"ruleId":"203","severity":1,"message":"209","line":66,"column":42,"nodeType":"200","messageId":"205","endLine":66,"endColumn":44},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["210"],"no-negated-in-lhs",["211"],"'ComponentMenuDx' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don‚Äôt need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'visSegnalino' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'hat' is defined but never used.","'iron' is defined but never used.","'car' is defined but never used.","'boat' is defined but never used.","'doggo' is defined but never used.","'shoe' is defined but never used.","'thimble' is defined but never used.","'wheelbarrow' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'a' is assigned a value but never used.","'xposSegnalino' is assigned a value but never used.","'tposSegnalino' is assigned a value but never used.","'strato' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Component' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]