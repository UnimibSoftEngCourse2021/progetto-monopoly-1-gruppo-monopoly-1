[{"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\index.js":"1","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\App.js":"2","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\reportWebVitals.js":"3","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\Menu.js":"4","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaDifficolta.js":"5","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentBoard.js":"6","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentMenuDx.js":"7","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\iniziaPartita.js":"8","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaNumeroGiocatori.js":"9","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaGiocatori.js":"10","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaSocietàStazioni.js":"11","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaTerreni.js":"12","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Pedina.js":"13","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentController.js":"14","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Banca.js":"15","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaPedina.js":"16","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Acquista.js":"17","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\CarteProbabilitaImprevisto\\Carte.js":"18","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Vendi.js":"19","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Costruisci.js":"20","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\VendiEdificio.js":"21","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Ipoteca.js":"22","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Abbandona.js":"23"},{"size":548,"mtime":1611152991993,"results":"24","hashOfConfig":"25"},{"size":13435,"mtime":1611216953764,"results":"26","hashOfConfig":"25"},{"size":375,"mtime":1611139245460,"results":"27","hashOfConfig":"25"},{"size":1915,"mtime":1611162783664,"results":"28","hashOfConfig":"25"},{"size":1466,"mtime":1611162783695,"results":"29","hashOfConfig":"25"},{"size":5957,"mtime":1611165656087,"results":"30","hashOfConfig":"25"},{"size":1039,"mtime":1611139245364,"results":"31","hashOfConfig":"25"},{"size":1250,"mtime":1611214656294,"results":"32","hashOfConfig":"25"},{"size":2069,"mtime":1611139245392,"results":"33","hashOfConfig":"25"},{"size":2782,"mtime":1611165480560,"results":"34","hashOfConfig":"25"},{"size":3206,"mtime":1611139245401,"results":"35","hashOfConfig":"25"},{"size":7539,"mtime":1611139245403,"results":"36","hashOfConfig":"25"},{"size":384,"mtime":1611139245388,"results":"37","hashOfConfig":"25"},{"size":14938,"mtime":1611221333500,"results":"38","hashOfConfig":"25"},{"size":1470,"mtime":1611139245354,"results":"39","hashOfConfig":"25"},{"size":5584,"mtime":1611167529213,"results":"40","hashOfConfig":"25"},{"size":4643,"mtime":1611222271675,"results":"41","hashOfConfig":"25"},{"size":4209,"mtime":1611139245358,"results":"42","hashOfConfig":"25"},{"size":9301,"mtime":1611139245350,"results":"43","hashOfConfig":"25"},{"size":6290,"mtime":1611139245345,"results":"44","hashOfConfig":"25"},{"size":5020,"mtime":1611139245352,"results":"45","hashOfConfig":"25"},{"size":9256,"mtime":1611139245348,"results":"46","hashOfConfig":"25"},{"size":2342,"mtime":1611162665033,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"16g0d1w",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\index.js",[],["103","104"],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\App.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\reportWebVitals.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\Menu.js",["105","106"],"import React, { Component } from 'react'\r\nimport ComponentMenuDx from './components/ComponentMenuDx';\r\nimport MonopolyLogoMenu from '../src/img/monopoly_logo_menu.png';\r\nimport SceltaNumeroGiocatori from './components/SceltaNumeroGiocatori';\r\nimport SceltaDifficolta from './components/SceltaDifficolta'\r\nimport { iniziaPartita } from './components/iniziaPartita'\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state={\r\n        numeroGiocatori: \"2\",\r\n        difficolta: \"normale\"\r\n      }\r\n    }\r\n\r\n    gestisciNumeroGiocatori = changeEvent => {\r\n      this.setState({\r\n          numeroGiocatori: changeEvent.target.value\r\n      })\r\n    }\r\n\r\n    gestisciDifficolta = changeEvent => {\r\n      this.setState({\r\n          difficolta: changeEvent.target.value \r\n      })\r\n    }\r\n\r\n    render() {\r\n      \r\n      return (\r\n        <div className=\"Menu\">\r\n          <table className=\"tabellaMenu\">\r\n            <tr>\r\n              <td className=\"colonna1\" >\r\n                <SceltaDifficolta gestisciDifficolta={this.gestisciDifficolta} difficolta={this.state.difficolta}/>\r\n              </td>\r\n              <td className=\"logoMonopoly\">\r\n                <img className=\"logo\" src={MonopolyLogoMenu} class=\"Profile-image\" alt=\"Profile image\" width=\"500\"/>\r\n                <button className = \"bottone-inizia-partita\" onClick={() => iniziaPartita(this.state.numeroGiocatori, this.state.difficolta)}>\r\n                  Inizia la partita\r\n                </button>\r\n              </td>\r\n              <td className=\"colonna1\" >\r\n                <SceltaNumeroGiocatori numeroGiocatori={this.state.numeroGiocatori} gestisciNumeroGiocatori={this.gestisciNumeroGiocatori}/>\r\n                Il numero dei giocatori scelto è: {this.state.numeroGiocatori}\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Menu;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaDifficolta.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentBoard.js",["107","108"],"import React from 'react';\r\nimport Pedina from './Pedina';\r\nimport ComponentController from './ComponentController';\r\n\r\nimport hat from '../img/hat.png';\r\nimport iron from '../img/iron.png';\r\nimport car from '../img/car.png';\r\nimport boat from '../img/boat.png';\r\nimport doggo from '../img/doggo.png';\r\nimport shoe from '../img/shoe.png';\r\nimport thimble from '../img/thimble.png';\r\nimport wheelbarrow from '../img/wheelbarrow.png';\r\n\r\n// Struttura dati che mappa la tavola da gioco.\r\n// Partendo da GO come elemento 0 e proseguendo nel verso di gioco\r\n// Tracciato record: indice, ascissa, ordinata, nome casella\r\nconst tavolaGioco = [\r\n    [0, 940, 600, \"GO\"],\r\n    [1, 870, 600, \"GO\"],\r\n    [2, 820, 600, \"GO\"],\r\n    [3, 770, 600, \"GO\"],\r\n    [4, 720, 600, \"GO\"],\r\n    [5, 660, 600, \"GO\"],\r\n    [6, 610, 600, \"GO\"],\r\n    [7, 560, 600, \"GO\"],\r\n    [8, 500, 600, \"GO\"],\r\n    [9, 450, 600, \"GO\"],\r\n    [10, 370, 600, \"JAIL\"],\r\n    [11, 370, 530, \"GO\"],\r\n    [12, 370, 480, \"GO\"],\r\n    [13, 370, 420, \"GO\"],\r\n    [14, 370, 360, \"GO\"],\r\n    [15, 370, 310, \"GO\"],\r\n    [16, 370, 250, \"GO\"],\r\n    [17, 370, 200, \"GO\"],\r\n    [18, 370, 150, \"GO\"],\r\n    [19, 370, 100, \"GO\"],\r\n    [20, 370, 20, \"FREE PARKING\"],\r\n    [21, 450, 20, \"GO\"],\r\n    [22, 500, 20, \"GO\"],\r\n    [23, 560, 20, \"GO\"],\r\n    [24, 610, 20, \"GO\"],\r\n    [25, 660, 20, \"GO\"],\r\n    [26, 720, 20, \"GO\"],\r\n    [27, 770, 20, \"GO\"],\r\n    [28, 820, 20, \"GO\"],\r\n    [29, 880, 20, \"GO\"],\r\n    [30, 940, 20, \"GO TO JAIL\"],\r\n    [31, 940, 100, \"GO\"],\r\n    [32, 940, 150, \"GO\"],\r\n    [33, 940, 200, \"GO\"],\r\n    [34, 940, 250, \"GO\"],\r\n    [35, 940, 310, \"GO\"],\r\n    [36, 940, 360, \"GO\"],\r\n    [37, 940, 420, \"GO\"],\r\n    [38, 940, 480, \"GO\"],\r\n    [39, 940, 530, \"GO\"]\r\n];\r\n\r\nclass ComponentBoard extends React.Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          // Tracciato record: nome, ascissa, ordinata, visibilita, strato, attualeCasella  \r\n          segnalini: [\r\n                        [\"hat\", 940, 600, \"visible\",0,0],\r\n                        [\"iron\", 940, 600, \"visible\",1,0],\r\n                        [\"car\", 940, 600, \"visible\",2,0],\r\n                        [\"boat\", 940, 600, \"visible\",3,0],\r\n                        [\"doggo\", 940, 600, \"visible\",4,0],\r\n                        [\"shoe\", 940, 600, \"visible\",5,0],\r\n                        [\"thimble\", 940, 600, \"hidden\",6,0],\r\n                        [\"wheelbarrow\", 940, 600, \"hidden\",7,0],\r\n                    ],\r\n         // turnoGiocatore: 0,\r\n         // numeroGiocatori: 4\r\n        };\r\n      }\r\n\r\n      \r\n      muoviPedine = changeEvent => {\r\n        this.setState({\r\n            \r\n        })\r\n      }\r\n  \r\n\r\n    render () {\r\n\r\n        for (let i = 0; i < this.state.segnalini.length; i++) {\r\n            let visSegn;\r\n            const [a, xposSegnalino, tposSegnalino, visSegnalino, strato] = this.state.segnalini[i];\r\n            /// if visibiità segnalini\r\n            if (i<=this.props.numeroGiocatori-1) {visSegn='visible'} else {visSegn='hidden'}\r\n\r\n            const segnalinoSet = {  left: xposSegnalino+\"px\",\r\n                                    top: tposSegnalino+\"px\",\r\n                                    visibility: visSegn,\r\n                                    zIndex: strato\r\n                                 }\r\n            switch (a) {\r\n                case \"car\": var mystyleCar = segnalinoSet;\r\n                    break;\r\n                case \"boat\": var mystyleBoat = segnalinoSet;\r\n                    break;\r\n                case \"hat\": var mystyleHat = segnalinoSet;\r\n                    break;\r\n                case \"iron\": var mystyleIron = segnalinoSet;\r\n                    break;\r\n                case \"doggo\": var mystyleDoggo = segnalinoSet;\r\n                    break;\r\n                case \"shoe\": var mystyleShoe = segnalinoSet;\r\n                    break;\r\n                case \"thimble\": var mystyleThimble = segnalinoSet;\r\n                    break;\r\n                case \"wheelbarrow\": var mystyleWheelbarrow = segnalinoSet;\r\n                    break;                    \r\n            }                   \r\n        }\r\n\r\n    \r\n  \r\n\r\n        \r\n             \r\n        return (\r\n            <div className=\"imgTavola\" >\r\n                <Pedina figura={car} stile={mystyleCar} />\r\n                <Pedina figura={boat} stile={mystyleBoat} />  \r\n                <Pedina figura={hat} stile={mystyleHat} />\r\n                <Pedina figura={iron} stile={mystyleIron} />\r\n                <Pedina figura={doggo} stile={mystyleDoggo} />\r\n                <Pedina figura={shoe} stile={mystyleShoe} />\r\n                <Pedina figura={thimble} stile={mystyleThimble} />\r\n                <Pedina figura={wheelbarrow} stile={mystyleWheelbarrow} />\r\n\r\n                <ComponentController \r\n                    segnalini={this.state.segnalini} \r\n                    muoviPedine={this.muoviPedine} \r\n                    tavolaGioco={tavolaGioco} \r\n                    turnoGiocatore={this.props.turnoGiocatore} \r\n                    setTurnoGiocatore={this.props.setTurnoGiocatore}\r\n                    numeroGiocatori={this.props.numeroGiocatori}\r\n                    terreni={this.props.terreni}\r\n                    setTerreni={this.props.setTerreni}\r\n                    giocatori={this.props.giocatori}\r\n                    setGiocatori={this.props.setGiocatori}\r\n                    societàStazioni={this.props.societàStazioni}\r\n                    setSocietàStazioni={this.props.setSocietàStazioni}\r\n                    caselle={this.props.caselle} \r\n                    setCaselle={this.props.setCaselle}\r\n                    tempo={this.props.tempo}\r\n                    setTempo={this.props.setTempo}\r\n                />\r\n\r\n            \r\n                                     \r\n                                    \r\n                                    \r\n\r\n            </div>\r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ComponentBoard;\r\n\r\n","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentMenuDx.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\iniziaPartita.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaNumeroGiocatori.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaGiocatori.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaSocietàStazioni.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaTerreni.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Pedina.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentController.js",["109"],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Banca.js",["110","111"],"import React, { Component } from 'react';\r\nimport TabellaGiocatori from './Tabelle/TabellaGiocatori';\r\n\r\nclass Banca extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            saldoContoGiocatori: [0,0,0,0,0,0],\r\n            contrattiGiocatori: [0,0,0,0,0,0],\r\n        }\r\n    }\r\n\r\n\r\n    // Passa i parametri a TabellaGiocatori (attualmente non funziona)\r\n    creaTabellaGiocatori = () => {\r\n        for(let i=1; i<=6; i++){\r\n            //this.state.createData(i, this.state.saldoContoGiocatori[i]);\r\n            <TabellaGiocatori props={i, this.state.saldoContoGiocatori[i]} />\r\n        }\r\n    }\r\n\r\n    //Modifica il saldo al giocatore (giocatore identificato tramite un numero int)\r\n    modificaSaldo = (sommaDiDenaro, giocatore) => {\r\n        if(this.state.saldoContoPedine[giocatore] + sommaDiDenaro >= 0){\r\n            this.state.saldoContoPedine[giocatore] += sommaDiDenaro;\r\n        }else{\r\n            console.log(\"Errore\"); //TODO\r\n        }\r\n    }\r\n\r\n    giocatorePassaDalVia = (giocatori,turnoGiocatore,setGiocatori) => {\r\n        // Incrementa il capitale del giocatore di turno di 500 quando passa dal VIA              \r\n        var nuoviGiocatori = giocatori;\r\n        nuoviGiocatori[turnoGiocatore].capitale=giocatori[turnoGiocatore].capitale+500;\r\n        setGiocatori(nuoviGiocatori);\r\n        alert('Giocatore:'+turnoGiocatore+ 'Passa Dal Via');  \r\n    }\r\n\r\n    getSaldoGiocatore\r\n}\r\nexport default Banca;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaPedina.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Acquista.js",["112","113","114","115"],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\CarteProbabilitaImprevisto\\Carte.js",["116"],"import React, { Component } from 'react';\r\nimport Banca from '../Banca';\r\n\r\nclass Carte extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //carta = [Numero carta, Descrizione, Somma di denaro, Somma per ogni casa, Somma per ogni albergo, Somma per ogni giocatore]\r\n            carte: [\r\n                //Probabilità\r\n                [0, 'Serata della Grande Opera: incassa $50 da ogni giocaotore', 0, 0, 0, 50],\r\n                [1, 'Errore della banca: incassa $200', 200, 0, 0, 0],\r\n                [2, 'Parcella del medico: paga $50', -50, 0, 0, 0],\r\n                [3, 'Rimborso della imposta sul reddito: incassa $20', 20, 0, 0, 0],\r\n                [4, 'Rendimento assicurazione sulla vita: incassa $100', 100, 0, 0, 0],\r\n                [5, 'Paga le spese mediche ospedaliere: paga $50', -50, 0, 0, 0],\r\n                [6, 'Paga le tasse scolastiche: paga $50', -50, 0, 0, 0],\r\n                [7, 'Commisione consulenza: incassa $25', 25, 0, 0, 0],\r\n                [8, 'Hai vinto il secondo posto in una gara di bellezza: incassa $10', 10, 0, 0, 0],\r\n                [9, 'Eredità: incassa $100', 100, 0, 0, 0],\r\n                [10, 'Vendita di azioni: incassa $100', 100, 0, 0, 0],\r\n                [11, 'Rendimento fondo vacanze: incassa $100', 100, 0, 0, 0],\r\n                [12, 'Sei stato tassato per le riparazioni in questa strada: paga $45 per casa e $115 per hotel', 0, -45, -115, 0],\r\n                [13, 'Esci di Prigione', 0, 0, 0, 0],\r\n                [14, 'Vai in Prigione senza passare dal Via', 0, 0, 0, 0],\r\n                [15, 'Vai al Via', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n\r\n                //Imprevisti\r\n                [16, 'Esci di Prigione', 0, 0, 0, 0],\r\n                [17, 'Vai al Via', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n                [18, 'Vai a Illinois Avenue', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$ IN CASO SI PASSI DAL VIA, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n                [19, 'Vai a St. Charles Place', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$ IN CASO SI PASSI DAL VIA, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n                [20, 'La Banca paga un dividendo: incassi $50', 50, 0, 0, 0],\r\n                [21, 'Vai indietro di 3 caselle', 0, 0, 0, 0],\r\n                [22, 'Vai in Prigione senza passare dal Via', 0, 0, 0, 0],\r\n                [23, 'Riparazioni generali a tutte le tue proprietà: paga $25 per casa e $100 per hotel', 0, -25, -100, 0],\r\n                [24, 'Paga tasse scadute: paga $10', -10, 0, 0, 0],\r\n                [25, 'Vai a Reading Railroad', 0, 0, 0, 0],\r\n                [26, 'Vai a Boardwalk', 0, 0, 0, 0],\r\n                [27, 'Sei eletto chairman della tavola da gioco: paga $50 da ogni giocaotore', 0, 0, 0, -50],\r\n                [28, 'Rendimento prestito immobiliare: incassa $150', 150, 0, 0, 0],\r\n                [29, 'Muovi la pedina al prossimo Utility, se non ha proprietario puoi comprarlo, se lo ha tira i dadi e paga 10 volte il risultato del lancio', 0, 0, 0, 0],\r\n                [30, 'Muovi la pedina alla prossimo Stazione, se non ha proprietario puoi comprarla, se lo ha paga il doppio del noleggio', 0, 0, 0, 0],\r\n                [31, 'Hai vinto una competizione di cruciverba: incassa $100', 100, 0, 0, 0],\r\n\r\n            ]\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    estraiCarta = (probabilitaOImprevisto, giocatore) => { //probabilità==true imprevisto==false\r\n        let idCarta;\r\n        if (probabilitaOImprevisto){\r\n            idCarta = Math.floor(Math.random()*(15));\r\n        }else{\r\n            idCarta = Math.floor(Math.random()*(31-16)+16);\r\n        };\r\n        this.attivaCarta(idCarta, giocatore);\r\n    }\r\n\r\n    \r\n    attivaCarta = (idCarta, giocatore) => {\r\n        //  TODO\r\n        alert('Giocatore: ' + giocatore + ' \\n La carta è: ' + this.state.carte[idCarta][1]);\r\n        if (this.state.carte[idCarta][2] != 0){\r\n             <Banca saldoContoGiocatori={() => this.props.modificaSaldo(this.state.carte[idCarta][2], giocatore)}/>\r\n        }\r\n    }\r\n}\r\nexport default Carte;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Vendi.js",["117","118"],"import React from 'react';\r\nimport {Paper, Modal, Button, Grid, TextField, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\r\n\r\n\r\nfunction Vendi(props){\r\n\r\n    \r\n  \r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n\r\n//Stato del terreno da vendere\r\nconst [terreno, setTerreno] = React.useState('');\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\n//Stato del gicatore che vuole vendere\r\nconst [venditore, setVenditore] = React.useState('');\r\nconst handleChangeVenditore = (event) => {\r\n  setVenditore(event.target.value);\r\n};\r\n\r\n//Stato del gicatore che vuole comprare, eventualmente la banca\r\nconst [aquirente, setAquirente] = React.useState('');\r\nconst handleChangeAquirente = (event) => {\r\n  setAquirente(event.target.value);\r\n};\r\n\r\n//Stato del prezzo a cui viene venduta la proprietà\r\nconst [prezzo, setPrezzo] = React.useState('');\r\nconst handleChangePrezzo = (event) => {\r\n  setPrezzo(event.target.value);\r\n};\r\n\r\n\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction EsisteSocietàStazione(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.societàStazioni.length){\r\n    if(terreno === props.societàStazioni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction EsisteGiocatore(nome){\r\n  \r\n  var i = 0;\r\n  while(i < props.giocatori.length){\r\n    if(nome === props.giocatori[i].nome){\r\n     return(i); \r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  return(-1);\r\n\r\n}\r\n\r\nfunction VendiTerreno(){\r\n\r\n  //verifico che il terreno esista e salvo il risultato in proprietà\r\n  var n = EsisteTerreno();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.terreni[n];\r\n  \r\n  if(!(proprietà.proprietario == venditore)){\r\n    alert('Non puoi vendere qualcosa che non ti appartiene');\r\n    return;\r\n  }\r\n  //verifico che il venditore esista e che non sia la banca\r\n  var y = EsisteGiocatore(venditore);\r\n  if(y === -1){\r\n    alert('Controlla che il nome del venditore sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var venditore2 = props.giocatori[y];\r\n  if(venditore2.inGioco === false){\r\n    alert('Hai inserito un venditore che non è più in gioco');\r\n    return;\r\n  }\r\n \r\n  \r\n  //verifico che l'aquirente esista\r\n  var x = EsisteGiocatore(aquirente);\r\n  var aquirente2;\r\n  if(x === -1){\r\n    alert(\"Controlla che il nome dell'aquirente sia scritto in modo corretto\");\r\n    return;\r\n  }\r\n  aquirente2 = props.giocatori[x];\r\n  if(aquirente2.inGioco === false){\r\n    alert('Hai inserito un aquirente che non è più in gioco');\r\n    return;\r\n  }\r\n  //verifico che sul terreno non ci siano ne case ne alberghi\r\n  if(proprietà.case > 0 || proprietà.alberghi > 0){\r\n    alert('Non puoi vendere un terreno con case o alberghi');\r\n    return;\r\n  }\r\n  //Verifico che venditore e aquirente non siano lo stesso giocatore\r\n  if(venditore2 === aquirente2){\r\n    alert('Non puoi vendere a te stesso');\r\n    return;\r\n  }\r\n  \r\n  //verifico che il prezzo sia > 0\r\n  if(prezzo <= 0){\r\n    alert('Controlla di aver inserito un prezzo maggiore di zero');\r\n    return;\r\n  }\r\n  //sposto i soldi dall'aquirente2 al venditore2\r\n  if(prezzo > 0){\r\n    aquirente2.capitale = aquirente2.capitale - parseInt(prezzo);\r\n    venditore2.capitale = venditore2.capitale + parseInt(prezzo);\r\n  }\r\n  //aquirente diventa il nuovo proprietario della proprietà\r\n  proprietà.proprietario = aquirente2.nome;\r\n  \r\n  //aggiorno le variabili di stato che contengono l'elenco dei terreni e dei giocatori\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = proprietà;  \r\n  props.setTerreni(nuoviTerreni);  \r\n  \r\n  var nuoviGiocatori = props.giocatori;\r\n  nuoviGiocatori[x] = aquirente2;\r\n  nuoviGiocatori[y] = venditore2;\r\n  props.setGiocatori(nuoviGiocatori);\r\n\r\n  console.log(props.giocatori);\r\n  console.log(props.terreni);\r\n\r\n  alert('La vendita è andata a buon fine');\r\n}\r\n\r\nfunction VendiStazioneSocietà(){\r\n\r\n  //verifico che la società / stazione esista e salvo il risultato in proprietà\r\n  var n = EsisteSocietàStazione();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome della società o della stazione sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.societàStazioni[n];\r\n  \r\n  if(!(proprietà.proprietario == venditore)){\r\n    alert('Non puoi vendere qualcosa che non ti appartiene');\r\n    return;\r\n  }\r\n  //verifico che il venditore esista \r\n  var y = EsisteGiocatore(venditore);\r\n  if(y === -1){\r\n    alert('Controlla che il nome del venditore sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var venditore2 = props.giocatori[y];\r\n  if(venditore2.inGioco === false){\r\n    alert('Hai inserito un venditore che non è più in gioco');\r\n    return;\r\n  }\r\n \r\n  \r\n  //verifico che l'aquirente esista\r\n  var x = EsisteGiocatore(aquirente);\r\n  var aquirente2;\r\n  if(x === -1){\r\n    alert(\"Controlla che il nome dell'aquirente sia scritto in modo corretto\");\r\n    return;\r\n  }\r\n  aquirente2 = props.giocatori[x];\r\n  if(aquirente2.inGioco === false){\r\n    alert('Hai inserito un aquirente che non è più in gioco');\r\n    return;\r\n  }\r\n  \r\n  //Verifico che venditore e aquirente non siano lo stesso giocatore\r\n  if(venditore2 === aquirente2){\r\n    alert('Non puoi vendere a te stesso');\r\n    return;\r\n  }\r\n  \r\n  //verifico che il prezzo sia > 0\r\n  if(prezzo <= 0){\r\n    alert('Controlla di aver inserito un prezzo maggiore di zero');\r\n    return;\r\n  }\r\n  //sposto i soldi dall'aquirente2 al venditore2\r\n  if(prezzo > 0){\r\n    aquirente2.capitale = aquirente2.capitale - parseInt(prezzo);\r\n    venditore2.capitale = venditore2.capitale + parseInt(prezzo);\r\n  }\r\n  //aquirente diventa il nuovo proprietario della proprietà\r\n  proprietà.proprietario = aquirente2.nome;\r\n  \r\n  //aggiorno le variabili di stato che contengono l'elenco delle società, delle stazioni e dei giocatori\r\n  var nuoveSocietàStazioni = props.societàStazioni;\r\n  nuoveSocietàStazioni[n] = proprietà;  \r\n  props.setSocietàStazioni(nuoveSocietàStazioni);  \r\n  \r\n  var nuoviGiocatori = props.giocatori;\r\n  nuoviGiocatori[x] = aquirente2;\r\n  nuoviGiocatori[y] = venditore2;\r\n  props.setGiocatori(nuoviGiocatori);\r\n\r\n  console.log(props.giocatori);\r\n  console.log(props.societàStazioni);\r\n\r\n  alert('La vendita è andata a buon fine');\r\n}\r\n\r\n\r\n\r\n//Stato del RadioGrup per la gerstione del tipo di vendita\r\n//si può scegliere se vendere terreni o stazioni/società\r\nconst [tipoVendita, setTipoVendita] = React.useState('Terreno');\r\nconst handleChangeTipoVendita = (event) => { setTipoVendita(event.target.value) };\r\n\r\nfunction Vendita(){\r\n  \r\n  if(tipoVendita === 'Terreno'){\r\n    VendiTerreno();\r\n  }\r\n  else{\r\n    VendiStazioneSocietà();\r\n  }\r\n}\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n      \r\n    <h2 style={{margin:'16px'}}>Cosa vuoi vendere</h2>\r\n    <RadioGroup value={tipoVendita} onChange={handleChangeTipoVendita} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"Terreno\" control={<Radio />} label=\"Terreno\" />\r\n        <FormControlLabel value=\"StazioneSocietà\" control={<Radio />} label=\"Stazione o Società\" />\r\n    </RadioGroup>\r\n    \r\n    <Grid container direction=\"column\">\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Inserisci il nome della casella che vuoi vendere</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'32px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n      </Grid>\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Nome del venditore</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'265px', width:'350px'}} onChange={handleChangeVenditore}/>\r\n      </Grid>\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Nome dell'aquirente</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'259px', width:'350px'}} onChange={handleChangeAquirente}/>\r\n      </Grid>\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Quanto dovrà pagare?</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'246px', width:'350px'}} onChange={handleChangePrezzo}/>\r\n      </Grid>\r\n      <Button variant=\"contained\" style={{margin:'16px', width:'100px'}} onClick={() => Vendita()} >\r\n        Vendi\r\n      </Button>\r\n    </Grid>\r\n\r\n    \r\n       \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Vendi\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default Vendi;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Costruisci.js",["119","120"],"import React from 'react';\r\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel, TextField, Grid} from '@material-ui/core';\r\n\r\n\r\nfunction Costruisci(props){\r\n\r\n    \r\n\r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n//Stato del RadioGrup casaAlbergo usato per scegliere la tipologia di edificio da costruire\r\nconst [edificio, setEdificio] = React.useState('casa');\r\nconst handleChangeTipoDiEdificio = (event) => { setEdificio(event.target.value) };\r\n\r\n//Stato del RadioGrup terreno usato per scegliere il terreno su cui costruire l'edificio\r\nconst [terreno, setTerreno] = React.useState(1);\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction VerificaColore(colore, giocatore){\r\n  var i = 0;\r\n  while(i < props.terreni.length){\r\n    if((props.terreni[i].colore === colore) && !(props.terreni[i].proprietario === giocatore)){\r\n      return(false);\r\n    }\r\n    i++\r\n  }\r\n  \r\n  return(true);\r\n}\r\n\r\n\r\nfunction CostruisciCasa(){\r\n  //verifico che il terreno esista e salvo il risultato in proprietà\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.terreni[n];\r\n  //verifico che la proprietà non sia ipotecata\r\n  if(proprietà.ipotecato === true){\r\n    alert('Non puoi costruire su un terreno ipotecato');\r\n    return;\r\n  }\r\n  //verifico che il turnoGiocatore sia proprietario di proprietà\r\n  if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi costruire su un terreno che non è tuo');\r\n    return;\r\n  }\r\n  //Per poter costruire su proprietà devi avere tutti i terreni dello stesso colore\r\n  var verifica = VerificaColore(proprietà.colore, proprietà.proprietario);\r\n  if(!verifica){\r\n    alert('Per costruire devi prima possedere tutte le caselle dello stesso colore');\r\n    return;\r\n  }\r\n  //Su un terreno si possono costruire massimo 4 case\r\n  if(proprietà.case >= 4){\r\n    alert('Su un terreno si possono costruire massimo quattro case');\r\n    return;\r\n  }\r\n  //Se sul terreno c'è un albergo non posso costruirvi delle case\r\n  if(proprietà.alberghi > 0){\r\n    alert(\"Se su un terreno c'e' un albergo non puoi costruirvi una casa\");\r\n    return;\r\n  }\r\n  //modifico l'array terreni e l'array giocatori\r\n  proprietà.case = proprietà.case + 1;\r\n  console.log(proprietà);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = proprietà;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var costoCostruzione = proprietà.valore*3/4;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - costoCostruzione;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('La costruzione della casa è andata a buon fine');\r\n\r\n}\r\n\r\nfunction CostruisciAlbergo(){\r\n  //verifico che il terreno esista e salvo il risultato in proprietà\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.terreni[n];\r\n  //verifico che la proprietà non sia ipotecata\r\n  if(proprietà.ipotecato === true){\r\n    alert('Non puoi costruire su un terreno ipotecato');\r\n    return;\r\n  }\r\n  //verifico che il turnoGiocatore sia proprietario di proprietà\r\n  if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi costruire su un terreno che non è tuo');\r\n    return;\r\n  }\r\n  //Su un terreno si può costruire massimo un albergo\r\n  if(proprietà.alberghi > 0){\r\n    alert('Su un terreno si può costruire massimo un albergo');\r\n    return;\r\n  }\r\n  \r\n  //Per poter costruire un albergo devi avere quattro case su proprietà \r\n  if(proprietà.case < 4){\r\n    alert('Per costruire un albergo su questo terreno devi prima possedere quattro case');\r\n    return;\r\n  }\r\n  \r\n  //modifico l'array terreni e l'array giocatori\r\n  proprietà.alberghi = proprietà.alberghi + 1;\r\n  proprietà.case = 0;\r\n  console.log(proprietà);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = proprietà;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var costoCostruzione = proprietà.valore*3/4;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - costoCostruzione;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert(\"La costruzione dell'albergo è andata a buon fine\");\r\n\r\n}\r\n\r\nfunction CostruisciEdificio(){\r\n  if(edificio === 'casa'){\r\n    CostruisciCasa();\r\n  }\r\n  else{\r\n    CostruisciAlbergo();\r\n  }\r\n  \r\n}\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n      \r\n    <h2 style={{margin:'16px'}}>Cosa vuoi costruire?</h2>\r\n    <RadioGroup value={edificio} onChange={handleChangeTipoDiEdificio} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"casa\" control={<Radio />} label=\"Casa\" />\r\n        <FormControlLabel value=\"albergo\" control={<Radio />} label=\"Albergo\" />\r\n    </RadioGroup>\r\n\r\n    <h2 style={{margin:'16px'}}>Dove vuoi costruire?</h2>\r\n    <Grid container direction=\"column\">\r\n      <TextField variant=\"outlined\" style={{margin:'16px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n    \r\n      <Button variant=\"contained\" style={{margin:'16px', width:'350px'}} onClick={() => CostruisciEdificio()}>\r\n        Costruisci questo edificio\r\n      </Button>\r\n   \r\n    </Grid>\r\n    \r\n    \r\n    \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Costruisci\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default Costruisci;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\VendiEdificio.js",["121","122"],"import React from 'react';\r\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel, TextField, Grid} from '@material-ui/core';\r\n\r\n\r\nfunction VendiEdificio(props){\r\n\r\n    \r\n\r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n//Stato del RadioGrup casaAlbergo usato per scegliere la tipologia di edificio da costruire\r\nconst [edificio, setEdificio] = React.useState('casa');\r\nconst handleChangeTipoDiEdificio = (event) => { setEdificio(event.target.value) };\r\n\r\n//Stato del RadioGrup terreno usato per scegliere il terreno su cui costruire l'edificio\r\nconst [terreno, setTerreno] = React.useState(1);\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction VendiCasa(){\r\n  //verifico che il terreno esista e salvo il risultato in proprietà\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.terreni[n];\r\n  //verifico che il turnoGiocatore sia proprietario di proprietà\r\n  if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi vendere gli edifici se il terreno che non è tuo');\r\n    return;\r\n  }\r\n  \r\n  //Se sul terreno non ci sono case non ho nulla da vendere\r\n  if(proprietà.case === 0){\r\n    alert(\"Su questo terreno non ci sono case\");\r\n    return;\r\n  }\r\n  //modifico l'array terreni e l'array giocatori\r\n  proprietà.case = proprietà.case - 1;\r\n  console.log(proprietà);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = proprietà;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = proprietà.valore*3/8;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('La vendita della casa è andata a buon fine');\r\n\r\n}\r\n\r\nfunction VendiAlbergo(){\r\n  //verifico che il terreno esista e salvo il risultato in proprietà\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.terreni[n];\r\n  //verifico che il turnoGiocatore sia proprietario di proprietà\r\n  if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi vendere gli edifici che non sono su un tuo terreno');\r\n    return;\r\n  }\r\n  //Verifico ceh sul terreno ci sia un albergo\r\n  if(!(proprietà.alberghi === 1)){\r\n    alert(\"Su questo terreno non c'è un albergo\");\r\n    return;\r\n  }\r\n  \r\n  \r\n  //modifico l'array terreni e l'array giocatori\r\n  //quando vendo un albergo alla banca ricevo in cambio metà del prezzo d'aquisto e 4 case\r\n  proprietà.alberghi = 0;\r\n  proprietà.case = 4;\r\n  console.log(proprietà);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = proprietà;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = proprietà.valore*3/8;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert(\"La vendita dell'albergo è andata a buon fine\");\r\n\r\n}\r\n\r\nfunction VendiEdificio(){\r\n  if(edificio === 'casa'){\r\n    VendiCasa();\r\n  }\r\n  else{\r\n    VendiAlbergo();\r\n  }\r\n  \r\n}\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n      \r\n    <h2 style={{margin:'16px'}}>Cosa vuoi vendere?</h2>\r\n    <RadioGroup value={edificio} onChange={handleChangeTipoDiEdificio} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"casa\" control={<Radio />} label=\"Casa\" />\r\n        <FormControlLabel value=\"albergo\" control={<Radio />} label=\"Albergo\" />\r\n    </RadioGroup>\r\n\r\n    <h2 style={{margin:'16px'}}>Dove si trova questo edificio?</h2>\r\n    <Grid container direction=\"column\">\r\n      <TextField variant=\"outlined\" style={{margin:'16px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n    \r\n      <Button variant=\"contained\" style={{margin:'16px', width:'350px'}} onClick={() => VendiEdificio()}>\r\n        vendi questo edificio\r\n      </Button>\r\n   \r\n    </Grid>\r\n    \r\n    \r\n    \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Vendi edificio\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default VendiEdificio;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Ipoteca.js",["123","124","125","126"],"import React from 'react';\r\nimport {Paper, Modal, Button, Grid, TextField, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\r\n\r\n\r\nfunction Ipoteca(props){\r\n\r\n    \r\n  \r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n\r\n//Stato del terreno da vendere\r\nconst [terreno, setTerreno] = React.useState('');\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\n//Stato del RadioGrup per la gerstione del tipo di vendita\r\n//si può scegliere se vendere terreni o stazioni/società\r\nconst [tipoVendita, setTipoVendita] = React.useState('Terreno');\r\nconst handleChangeTipoVendita = (event) => { setTipoVendita(event.target.value) };\r\n\r\n\r\n//Stato del RadioGrup per la gerstione dell'azione da svolgere\r\n//si può scegliere tra ipotecare o riscattare l'ipoteca\r\nconst [azione, setAzione] = React.useState('Ipoteca');\r\nconst handleChangeAzione = (event) => { setAzione(event.target.value) };\r\n\r\n\r\n\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction EsisteSocietàStazione(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.societàStazioni.length){\r\n    if(terreno === props.societàStazioni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\n\r\nfunction IpotecaTerreno(){\r\n\r\n  //verifico che il terreno esista e salvo il risultato in proprietà\r\n  var n = EsisteTerreno();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.terreni[n];\r\n  \r\n \r\n  //verifico che sul terreno non ci siano ne case ne alberghi\r\n  if(proprietà.case > 0 || proprietà.alberghi > 0){\r\n    alert('Non puoi ipotecare un terreno con case o alberghi');\r\n    return;\r\n  }\r\n  //verifico che il turnoGiocatore sia proprietario di proprietà\r\n  if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi ipotecare una proprietà che non ti appartiene');\r\n    return;\r\n  }\r\n  \r\n  //modifico l'array terreni e l'array giocatori\r\n  proprietà.ipotecato = true;\r\n  console.log(proprietà);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = proprietà;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = proprietà.valore/2;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('Questa proprietà è stata ipotecata');\r\n}\r\n\r\nfunction IpotecaStazioneSocietà(){\r\n\r\n  //verifico che la società / stazione esista e salvo il risultato in proprietà\r\n  var n = EsisteSocietàStazione();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome della società o della stazione sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var proprietà = props.societàStazioni[n];\r\n  \r\n  //verifico che il turnoGiocatore sia proprietario di proprietà\r\n  if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi Ipotecare una proprietà che non ti appartiene');\r\n    return;\r\n  }\r\n   \r\n  //modifico l'array terreni e l'array giocatori\r\n  proprietà.ipotecato = true;\r\n  console.log(proprietà);\r\n  var nuoveSocietàStazioni = props.societàStazioni;\r\n  nuoveSocietàStazioni[n] = proprietà;\r\n  props.setSocietàStazioni(nuoveSocietàStazioni);\r\n  console.log(props.societàStazioni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = proprietà.valore/2;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('Questa proprietà è stata ipotecata');\r\n\r\n \r\n}\r\n\r\n\r\nfunction Ipoteca(){\r\n  \r\n    if(tipoVendita === 'Terreno'){\r\n      IpotecaTerreno();\r\n    }\r\n    else{\r\n      IpotecaStazioneSocietà();\r\n    }\r\n  }\r\n\r\n\r\n  \r\nfunction RiscattaTerreno(){\r\n\r\n    //verifico che il terreno esista e salvo il risultato in proprietà\r\n    var n = EsisteTerreno();\r\n    \r\n    if(n === -1){\r\n      alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n      return;\r\n    }\r\n    var proprietà = props.terreni[n];\r\n    \r\n   \r\n    //verifico  il terreno sia ipotecato\r\n    if(proprietà.ipotecato === false){\r\n      alert('Non puoi riscattare un terreno che non è ipotecato');\r\n      return;\r\n    }\r\n    //verifico che il turnoGiocatore sia proprietario di proprietà\r\n    if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n      alert('Non puoi Ipotecare una proprietà che non ti appartiene');\r\n      return;\r\n    }\r\n    \r\n    //modifico l'array terreni e l'array giocatori\r\n    proprietà.ipotecato = false;\r\n    console.log(proprietà);\r\n    var nuoviTerreni = props.terreni;\r\n    nuoviTerreni[n] = proprietà;\r\n    props.setTerreni(nuoviTerreni);\r\n    console.log(props.terreni);\r\n  \r\n    var nuoviGiocatori = props.giocatori;\r\n    var spesa = (proprietà.valore/2) +(proprietà.valore/10);\r\n    nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - spesa;\r\n    props.setGiocatori(nuoviGiocatori);\r\n    console.log(props.giocatori);\r\n  \r\n    alert(\"L'ipoteca su questa proprietà è stata riscattata con successo\");\r\n  }\r\n  \r\n  function RiscattaStazioneSocietà(){\r\n  \r\n    //verifico che la società / stazione esista e salvo il risultato in proprietà\r\n    var n = EsisteSocietàStazione();\r\n    \r\n    if(n === -1){\r\n      alert('Controlla che il nome della società o della stazione sia scritto in modo corretto');\r\n      return;\r\n    }\r\n    var proprietà = props.societàStazioni[n];\r\n    \r\n    //verifico che il turnoGiocatore sia proprietario di proprietà\r\n    if(!(proprietà.proprietario == props.turnoGiocatore)){\r\n      alert('Non puoi Ipotecare una proprietà che non ti appartiene');\r\n      return;\r\n    }\r\n    //verifico  la società/stazione sia ipotecata\r\n    if(proprietà.ipotecato === false){\r\n        alert('Non puoi riscattare una società o una stazione che non è ipotecata');\r\n        return;\r\n      }\r\n     \r\n    //modifico l'array terreni e l'array giocatori\r\n    proprietà.ipotecato = false;\r\n    console.log(proprietà);\r\n    var nuoveSocietàStazioni = props.societàStazioni;\r\n    nuoveSocietàStazioni[n] = proprietà;\r\n    props.setSocietàStazioni(nuoveSocietàStazioni);\r\n    console.log(props.societàStazioni);\r\n  \r\n    var nuoviGiocatori = props.giocatori;\r\n    var spesa = (proprietà.valore/2) + (proprietà.valore/10);\r\n    nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - spesa;\r\n    props.setGiocatori(nuoviGiocatori);\r\n    console.log(props.giocatori);\r\n  \r\n    alert(\"L'ipoteca su questa proprietà è stata riscattata con successo\");\r\n  \r\n   \r\n  }\r\n  \r\n  \r\n  function Riscatta(){\r\n    \r\n      if(tipoVendita === 'Terreno'){\r\n        RiscattaTerreno();\r\n      }\r\n      else{\r\n        RiscattaStazioneSocietà();\r\n      }\r\n    }\r\n  \r\n\r\n\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n\r\n     <h2 style={{margin:'16px'}}>Che azione vuoi svolgere</h2>\r\n    <RadioGroup value={azione} onChange={handleChangeAzione} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"Ipotecare\" control={<Radio />} label=\"Ipotecare\" />\r\n        <FormControlLabel value=\"Riscattare\" control={<Radio />} label=\"Riscattare\" />\r\n    </RadioGroup>\r\n\r\n    <h2 style={{margin:'16px'}}>Su quale proprietà?</h2>\r\n    <RadioGroup value={tipoVendita} onChange={handleChangeTipoVendita} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"Terreno\" control={<Radio />} label=\"Terreno\" />\r\n        <FormControlLabel value=\"StazioneSocietà\" control={<Radio />} label=\"Stazione o Società\" />\r\n    </RadioGroup>\r\n    \r\n    <Grid container direction=\"column\">\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Inserisci il nome della casella che vuoi ipotecare o riscattare</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'32px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n      </Grid>\r\n      \r\n      \r\n      {azione==='Ipotecare'?\r\n      <Button variant=\"contained\" style={{margin:'16px', width:'100px'}} onClick={() => Ipoteca()} >\r\n        ipoteca\r\n      </Button>\r\n      :\r\n      <Button variant=\"contained\" style={{margin:'16px', width:'200px'}} onClick={() => Riscatta()} >\r\n        Riscatta ipoteca\r\n      </Button>\r\n      }\r\n    </Grid>\r\n\r\n    \r\n       \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Ipoteca\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default Ipoteca;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Abbandona.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":2,"column":8,"nodeType":"133","messageId":"134","endLine":2,"endColumn":23},{"ruleId":"135","severity":1,"message":"136","line":39,"column":17,"nodeType":"137","endLine":39,"endColumn":117},{"ruleId":"131","severity":1,"message":"138","line":93,"column":53,"nodeType":"133","messageId":"134","endLine":93,"endColumn":65},{"ruleId":"139","severity":1,"message":"140","line":102,"column":13,"nodeType":"141","messageId":"142","endLine":119,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":118,"column":89,"nodeType":"145","messageId":"146","endLine":118,"endColumn":90},{"ruleId":"147","severity":1,"message":"148","line":18,"column":39,"nodeType":"149","messageId":"150","endLine":18,"endColumn":40},{"ruleId":"151","severity":1,"message":"152","line":25,"column":13,"nodeType":"153","endLine":25,"endColumn":40},{"ruleId":"154","severity":1,"message":"155","line":14,"column":13,"nodeType":"145","messageId":"156","endLine":14,"endColumn":15},{"ruleId":"154","severity":1,"message":"155","line":15,"column":13,"nodeType":"145","messageId":"156","endLine":15,"endColumn":15},{"ruleId":"154","severity":1,"message":"155","line":15,"column":34,"nodeType":"145","messageId":"156","endLine":15,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":33,"column":30,"nodeType":"145","messageId":"156","endLine":33,"endColumn":32},{"ruleId":"154","severity":1,"message":"157","line":66,"column":42,"nodeType":"145","messageId":"156","endLine":66,"endColumn":44},{"ruleId":"154","severity":1,"message":"155","line":113,"column":31,"nodeType":"145","messageId":"156","endLine":113,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":193,"column":31,"nodeType":"145","messageId":"156","endLine":193,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":75,"column":31,"nodeType":"145","messageId":"156","endLine":75,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":127,"column":31,"nodeType":"145","messageId":"156","endLine":127,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":60,"column":31,"nodeType":"145","messageId":"156","endLine":60,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":97,"column":31,"nodeType":"145","messageId":"156","endLine":97,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":100,"column":31,"nodeType":"145","messageId":"156","endLine":100,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":134,"column":31,"nodeType":"145","messageId":"156","endLine":134,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":189,"column":33,"nodeType":"145","messageId":"156","endLine":189,"endColumn":35},{"ruleId":"154","severity":1,"message":"155","line":223,"column":33,"nodeType":"145","messageId":"156","endLine":223,"endColumn":35},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'ComponentMenuDx' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'visSegnalino' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]