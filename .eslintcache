[{"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\index.js":"1","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\App.js":"2","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\reportWebVitals.js":"3","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\Menu.js":"4","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaLeft.js":"5","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaRight.js":"6","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaDifficolta.js":"7","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentBoard.js":"8","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentMenuDx.js":"9","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\iniziaPartita.js":"10","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaNumeroGiocatori.js":"11","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaGiocatori.js":"12","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaSociet√†Stazioni.js":"13","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaTerreni.js":"14","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Pedina.js":"15","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentController.js":"16","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Banca.js":"17","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaPedina.js":"18","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Acquista.js":"19","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\CarteProbabilitaImprevisto\\Carte.js":"20","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Vendi.js":"21","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Costruisci.js":"22","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\VendiEdificio.js":"23","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Ipoteca.js":"24","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Abbandona.js":"25"},{"size":548,"mtime":1611152991993,"results":"26","hashOfConfig":"27"},{"size":12491,"mtime":1611162546434,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1611139245460,"results":"29","hashOfConfig":"27"},{"size":1915,"mtime":1611162783664,"results":"30","hashOfConfig":"27"},{"size":271,"mtime":1611139245366,"results":"31","hashOfConfig":"27"},{"size":271,"mtime":1611139245386,"results":"32","hashOfConfig":"27"},{"size":1466,"mtime":1611162783695,"results":"33","hashOfConfig":"27"},{"size":5988,"mtime":1611146398817,"results":"34","hashOfConfig":"27"},{"size":1039,"mtime":1611139245364,"results":"35","hashOfConfig":"27"},{"size":1279,"mtime":1611152962042,"results":"36","hashOfConfig":"27"},{"size":2069,"mtime":1611139245392,"results":"37","hashOfConfig":"27"},{"size":2817,"mtime":1611164895203,"results":"38","hashOfConfig":"27"},{"size":3206,"mtime":1611139245401,"results":"39","hashOfConfig":"27"},{"size":7539,"mtime":1611139245403,"results":"40","hashOfConfig":"27"},{"size":384,"mtime":1611139245388,"results":"41","hashOfConfig":"27"},{"size":14677,"mtime":1611162783996,"results":"42","hashOfConfig":"27"},{"size":1470,"mtime":1611139245354,"results":"43","hashOfConfig":"27"},{"size":9477,"mtime":1611163564994,"results":"44","hashOfConfig":"27"},{"size":3555,"mtime":1611139245343,"results":"45","hashOfConfig":"27"},{"size":4209,"mtime":1611139245358,"results":"46","hashOfConfig":"27"},{"size":9301,"mtime":1611139245350,"results":"47","hashOfConfig":"27"},{"size":6290,"mtime":1611139245345,"results":"48","hashOfConfig":"27"},{"size":5020,"mtime":1611139245352,"results":"49","hashOfConfig":"27"},{"size":9256,"mtime":1611139245348,"results":"50","hashOfConfig":"27"},{"size":2342,"mtime":1611162665033,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"16g0d1w",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\index.js",[],["112","113"],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\App.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\reportWebVitals.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\Menu.js",["114","115"],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaLeft.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentProprietaRight.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaDifficolta.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentBoard.js",["116","117","118"],"import React from 'react';\r\nimport Pedina from './Pedina';\r\nimport ComponentController from './ComponentController';\r\n\r\nimport hat from '../img/hat.png';\r\nimport iron from '../img/iron.png';\r\nimport car from '../img/car.png';\r\nimport boat from '../img/boat.png';\r\nimport doggo from '../img/doggo.png';\r\nimport shoe from '../img/shoe.png';\r\nimport thimble from '../img/thimble.png';\r\nimport wheelbarrow from '../img/wheelbarrow.png';\r\n\r\n// Struttura dati che mappa la tavola da gioco.\r\n// Partendo da GO come elemento 0 e proseguendo nel verso di gioco\r\n// Tracciato record: indice, ascissa, ordinata, nome casella\r\nconst tavolaGioco = [\r\n    [0, 940, 600, \"GO\"],\r\n    [1, 870, 600, \"GO\"],\r\n    [2, 820, 600, \"GO\"],\r\n    [3, 770, 600, \"GO\"],\r\n    [4, 720, 600, \"GO\"],\r\n    [5, 660, 600, \"GO\"],\r\n    [6, 610, 600, \"GO\"],\r\n    [7, 560, 600, \"GO\"],\r\n    [8, 500, 600, \"GO\"],\r\n    [9, 450, 600, \"GO\"],\r\n    [10, 370, 600, \"JAIL\"],\r\n    [11, 370, 530, \"GO\"],\r\n    [12, 370, 480, \"GO\"],\r\n    [13, 370, 420, \"GO\"],\r\n    [14, 370, 360, \"GO\"],\r\n    [15, 370, 310, \"GO\"],\r\n    [16, 370, 250, \"GO\"],\r\n    [17, 370, 200, \"GO\"],\r\n    [18, 370, 150, \"GO\"],\r\n    [19, 370, 100, \"GO\"],\r\n    [20, 370, 20, \"FREE PARKING\"],\r\n    [21, 450, 20, \"GO\"],\r\n    [22, 500, 20, \"GO\"],\r\n    [23, 560, 20, \"GO\"],\r\n    [24, 610, 20, \"GO\"],\r\n    [25, 660, 20, \"GO\"],\r\n    [26, 720, 20, \"GO\"],\r\n    [27, 770, 20, \"GO\"],\r\n    [28, 820, 20, \"GO\"],\r\n    [29, 880, 20, \"GO\"],\r\n    [30, 940, 20, \"GO TO JAIL\"],\r\n    [31, 940, 100, \"GO\"],\r\n    [32, 940, 150, \"GO\"],\r\n    [33, 940, 200, \"GO\"],\r\n    [34, 940, 250, \"GO\"],\r\n    [35, 940, 310, \"GO\"],\r\n    [36, 940, 360, \"GO\"],\r\n    [37, 940, 420, \"GO\"],\r\n    [38, 940, 480, \"GO\"],\r\n    [39, 940, 530, \"GO\"]\r\n];\r\n\r\nclass ComponentBoard extends React.Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          // Tracciato record: nome, ascissa, ordinata, visibilita, strato, attualeCasella  \r\n          segnalini: [\r\n                        [\"hat\", 940, 600, \"visible\",0,0],\r\n                        [\"iron\", 940, 600, \"visible\",1,0],\r\n                        [\"car\", 940, 600, \"visible\",2,0],\r\n                        [\"boat\", 940, 600, \"visible\",3,0],\r\n                        [\"doggo\", 940, 600, \"visible\",4,0],\r\n                        [\"shoe\", 940, 600, \"visible\",5,0],\r\n                        [\"thimble\", 940, 600, \"hidden\",6,0],\r\n                        [\"wheelbarrow\", 940, 600, \"hidden\",7,0],\r\n                    ],\r\n         // turnoGiocatore: 0,\r\n         // numeroGiocatori: 4\r\n        };\r\n      }\r\n\r\n      \r\n      muoviPedine = changeEvent => {\r\n        this.setState({\r\n            \r\n        })\r\n      }\r\n  \r\n\r\n    render () {\r\n\r\n        for (let i = 0; i < this.state.segnalini.length; i++) {\r\n            let visSegn;\r\n            const [a, xposSegnalino, tposSegnalino, visSegnalino, strato] = this.state.segnalini[i];\r\n            /// if visibiit√† segnalini\r\n            if (i<=this.props.numeroGiocatori-1) {visSegn='visible'} else {visSegn='hidden'}\r\n\r\n            const segnalinoSet = {  left: xposSegnalino+\"px\",\r\n                                    top: tposSegnalino+\"px\",\r\n                                    visibility: visSegn,\r\n                                    zIndex: strato\r\n                                 }\r\n            switch (a) {\r\n                case \"car\": var mystyleCar = segnalinoSet;\r\n                    break;\r\n                case \"boat\": var mystyleBoat = segnalinoSet;\r\n                    break;\r\n                case \"hat\": var mystyleHat = segnalinoSet;\r\n                    break;\r\n                case \"iron\": var mystyleIron = segnalinoSet;\r\n                    break;\r\n                case \"doggo\": var mystyleDoggo = segnalinoSet;\r\n                    break;\r\n                case \"shoe\": var mystyleShoe = segnalinoSet;\r\n                    break;\r\n                case \"thimble\": var mystyleThimble = segnalinoSet;\r\n                    break;\r\n                case \"wheelbarrow\": var mystyleWheelbarrow = segnalinoSet;\r\n                    break;                    \r\n            }                   \r\n        }\r\n\r\n    \r\n  \r\n\r\n        \r\n             \r\n        return (\r\n            <div className=\"imgTavola\" >\r\n                <Pedina figura={car} stile={mystyleCar} />\r\n                <Pedina figura={boat} stile={mystyleBoat} />  \r\n                <Pedina figura={hat} stile={mystyleHat} />\r\n                <Pedina figura={iron} stile={mystyleIron} />\r\n                <Pedina figura={doggo} stile={mystyleDoggo} />\r\n                <Pedina figura={shoe} stile={mystyleShoe} />\r\n                <Pedina figura={thimble} stile={mystyleThimble} />\r\n                <Pedina figura={wheelbarrow} stile={mystyleWheelbarrow} />\r\n\r\n                <ComponentController \r\n                    segnalini={this.state.segnalini} muoviPedine={this.muoviPedine} \r\n                    muoviPedine={this.muoviPedine} \r\n                    tavolaGioco={tavolaGioco} \r\n                    turnoGiocatore={this.props.turnoGiocatore} \r\n                    setTurnoGiocatore={this.props.setTurnoGiocatore}\r\n                    numeroGiocatori={this.props.numeroGiocatori}\r\n                    terreni={this.props.terreni}\r\n                    setTerreni={this.props.setTerreni}\r\n                    giocatori={this.props.giocatori}\r\n                    setGiocatori={this.props.setGiocatori}\r\n                    societ√†Stazioni={this.props.societ√†Stazioni}\r\n                    setSociet√†Stazioni={this.props.setSociet√†Stazioni}\r\n                    caselle={this.props.caselle} \r\n                    setCaselle={this.props.setCaselle}\r\n                    tempo={this.props.tempo}\r\n                    setTempo={this.props.setTempo}\r\n                />\r\n\r\n            \r\n                                     \r\n                                    \r\n                                    \r\n\r\n            </div>\r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default ComponentBoard;\r\n\r\n","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentMenuDx.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\iniziaPartita.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaNumeroGiocatori.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaGiocatori.js",["119"],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaSociet√†Stazioni.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Tabelle\\TabellaTerreni.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Pedina.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\ComponentController.js",["120","121","122","123","124","125"],"import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Acquista from './AzioniConBottone/Acquista';\r\nimport Costruisci from './AzioniConBottone/Costruisci';\r\nimport Vendi from './AzioniConBottone/Vendi';\r\nimport VendiEdificio from './AzioniConBottone/VendiEdificio';\r\nimport Ipoteca from './AzioniConBottone/Ipoteca';\r\nimport Abbandona from './AzioniConBottone/Abbandona';\r\n//import SceltaNumeroGiocatori from './SceltaNumeroGiocatori';\r\nimport Carte from './CarteProbabilitaImprevisto/Carte';\r\nimport Banca from './Banca';\r\n\r\n\r\n\r\nlet dado1;\r\nlet dado2;\r\nlet sommaDadi;\r\nlet punteggioDoppio;\r\nlet carta1 = new Carte();\r\nlet dadiTirati; // Questo booleano permette di tirare i dadi solo ina volta per turno\r\n\r\nfunction verificaPunteggioDoppio(dado1, dado2){\r\n    if(dado1 === dado2){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n\r\nclass ComponentController extends React.Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            primoMsgTA: 'ultimo messaggio',\r\n            secondoMsgTA: 'penultimo messaggio',\r\n            terzoMsgTA: 'terzultimo messaggio',\r\n        };\r\n      }\r\n\r\n    spostaSegnalino (sommaDadi) {\r\n        // i giocatori vanno da 1 a 6 , per ora assegno i segnalini in ordine numerico\r\n        // uso this.props.turnoGiocatore-1 perch√® i segnalini partono da ZERO\r\n        let numSegnalino = this.props.turnoGiocatore;\r\n        let ascissa = this.props.segnalini[numSegnalino][1];\r\n        let ordinata = this.props.segnalini[numSegnalino][2];\r\n\r\n        //let [a, xposSegnalino, tposSegnalino, visSegnalino, strato, attualeCasella] = this.props.segnalini[numSegnalino];\r\n        let attualeCasella = this.props.segnalini[numSegnalino][5];\r\n        \r\n        var i;\r\n        for (i = 1; i < sommaDadi+1; i++) {\r\n            if (attualeCasella === 39) {\r\n                attualeCasella=0;\r\n                let banca1 = new Banca();\r\n                banca1.giocatorePassaDalVia(this.props.giocatori,this.props.turnoGiocatore,this.props.setGiocatori);\r\n            } else {\r\n                attualeCasella = attualeCasella + 1\r\n            }        \r\n          }\r\n\r\n        ascissa = this.props.tavolaGioco[attualeCasella][1];\r\n        ordinata = this.props.tavolaGioco[attualeCasella][2];\r\n  \r\n        //this.props.segnalini[0]=[\"hat\", ascissa, ordinata, \"visible\",0,attualeCasella];\r\n        this.props.segnalini[numSegnalino][1]=ascissa;\r\n        this.props.segnalini[numSegnalino][2]=ordinata;\r\n        this.props.segnalini[numSegnalino][5]=attualeCasella;\r\n\r\n        if (this.props.caselle[attualeCasella].tipo ==='imprevisti') {\r\n           // alert('imprevisti');\r\n           carta1.estraiCarta(false,this.props.turnoGiocatore);\r\n        };\r\n        if (this.props.caselle[attualeCasella].tipo ==='probabilita') {\r\n            //alert('probabilita');\r\n            carta1.estraiCarta(true,this.props.turnoGiocatore);\r\n        };        \r\n        this.props.muoviPedine();   \r\n\r\n    }      \r\n\r\n    spostaAuto () {\r\n        // funzione di messa a punto mappa caselle \r\n        // sposta il segnalino car in tutte le caselle una alla volta\r\n        let ascissa = this.props.segnalini[2][1];\r\n        let ordinata = this.props.segnalini[2][2];\r\n\r\n        let [a, xposSegnalino, tposSegnalino, visSegnalino, strato, attualeCasella] = this.props.segnalini[2];\r\n\r\n        if (attualeCasella === 39) {\r\n            attualeCasella=0\r\n        } else {\r\n            attualeCasella = attualeCasella + 1\r\n        }\r\n\r\n        ascissa = this.props.tavolaGioco[attualeCasella][1];\r\n        ordinata = this.props.tavolaGioco[attualeCasella][2];\r\n\r\n        this.props.segnalini[2]=[\"car\", ascissa, ordinata, \"visible\",2,attualeCasella];\r\n        this.props.muoviPedine();   \r\n    }        \r\n\r\n    dadiTirati = false;\r\n\r\n    tiraDadi = () => {\r\n        \r\n        if (!dadiTirati){\r\n            dado1 = Math.floor(Math.random()*6) + 1;\r\n            dado2 = Math.floor(Math.random()*6) + 1;\r\n            sommaDadi = dado1 + dado2;\r\n            punteggioDoppio = verificaPunteggioDoppio(dado1, dado2);   \r\n\r\n            this.spostaSegnalino(sommaDadi);\r\n                \r\n            this.setState({\r\n                primoMsgTA: `${sommaDadi}`,\r\n                secondoMsgTA: 'Il punteggio dei dadi √® doppio: '+dado1+' + '+dado2 +' ' + `${punteggioDoppio}`,\r\n                terzoMsgTA: `${sommaDadi}`\r\n            })\r\n            dadiTirati = true;\r\n        }\r\n        else {\r\n            alert('Non puoi tirare nuovamente i dadi.');\r\n        }\r\n    }\r\n\r\n    // Funzione che permette di concludere il turno e che passa il comando al giocatore successivo.\r\n    // Per comunicare ai giocatori questo cambiamento viene utilizzato un allert.\r\n    finisciTurno = () => {\r\n        const giocatore = this.props.turnoGiocatore;\r\n        var giocatore2;\r\n        if(giocatore === this.props.numeroGiocatori-1){\r\n            giocatore2 = 0;\r\n        }\r\n        else{\r\n            giocatore2 = giocatore + 1;\r\n        }\r\n        \r\n        if(this.props.giocatori[giocatore2].inGioco===false){\r\n            //cerco il primo giocatore in gioco\r\n            var i = giocatore2+1;\r\n            var x = true;\r\n            \r\n            while(x){\r\n                if(this.props.giocatori[i].inGioco === true){\r\n                    giocatore2 = i;\r\n                    x = false;\r\n                }\r\n                i++;\r\n            }\r\n            \r\n        }\r\n\r\n        dadiTirati = false;\r\n        this.props.setTurnoGiocatore(giocatore2);  \r\n\r\n        \r\n\r\n        this.fallimentoVittoria();\r\n\r\n        if(!(this.props.tempo === null)){\r\n            this.partitaATempo();\r\n        }\r\n\r\n        alert('Ora tocca ad un altro giocatore');\r\n        \r\n    }\r\n\r\n    //Questa funzione verifica se il giocatore che ha concluso il turno non ha pi√π soldi\r\n    //verifica anche che ci siano almeno 2 giocatori in gioco se ne √® rimasto solo uno ha vinto\r\n    fallimentoVittoria = ()=>{\r\n        var i;\r\n        var n = 0;\r\n        for(i=0; i<this.props.giocatori.length; i++){\r\n            if(this.props.giocatori[i].inGioco === true){ \r\n                n++;\r\n            }\r\n        }\r\n        \r\n        if(n === 1){\r\n            var vincitore;\r\n            for(i=0; i<this.props.giocatori.length; i++){\r\n                if(this.props.giocatori[i].inGioco === true){ \r\n                    vincitore = this.props.giocatori[i].nome;\r\n                }\r\n            }\r\n            alert('Giocatore: '+ vincitore +' hai vinto');\r\n            //concludere la partita\r\n            return;\r\n        }\r\n\r\n        if(this.props.giocatori[this.props.turnoGiocatore].capitale <= 0){\r\n           alert('Giocatore: ' + this.props.giocatori[this.props.turnoGiocatore].nome  + ' \\n Non hai pi√π soldi hai perso ');\r\n           var nuoviGiocatori = this.props.giocatori;\r\n           nuoviGiocatori[this.props.turnoGiocatore].inGioco = false;\r\n           this.props.setGiocatori(nuoviGiocatori);\r\n           console.log(this.props.giocatori);\r\n           return;\r\n           \r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    //Questa funzione decrementa il numero di turni che mancano allo scadere del tempo\r\n    //se il tempo √® finito stabilisce un vincitore confrontando i capitali dei giocatori rimasti\r\n    partitaATempo = ()=>{\r\n        var nuovoTempo = this.props.tempo;\r\n        nuovoTempo = nuovoTempo - 1;\r\n        this.props.setTempo(nuovoTempo);\r\n        if(this.props.tempo === 0){\r\n            var vincitore = this.props.giocatori[0];\r\n            var i;\r\n                        \r\n            for(i=1; i<this.props.giocatori.length; i++){\r\n                if(vincitore.capitale < this.props.giocatori[i].capitale){\r\n                    vincitore = this.props.giocatori[i];\r\n                }\r\n            }\r\n            console.log(vincitore);\r\n            //verifico che ci sia un pareggio\r\n            var pareggio = 0;\r\n            var n = 0;\r\n            while(n<this.props.giocatori.length){\r\n                if(vincitore.capitale === this.props.giocatori[n].capitale){\r\n                    pareggio++\r\n                }\r\n                n++;\r\n            }\r\n            \r\n           console.log(pareggio);\r\n            \r\n            \r\n            if(pareggio<2){\r\n                alert('Giocatore: '+ vincitore.nome +' hai vinto');\r\n                //concludere la partita\r\n                return;\r\n            }\r\n            else{\r\n                alert(\"C'√© stato un pareggio\");\r\n                //concludere la partita\r\n                return;\r\n            }\r\n\r\n\r\n        }\r\n        else{\r\n            //continua la partita\r\n        }\r\n    }\r\n\r\n    render () {\r\n        \r\n        return (\r\n            <div>\r\n                <table className=\"tableController\">\r\n                    \r\n                    <tr>\r\n                        <td className=\"tdController\" >\r\n                            <button type=\"button\" onClick={() => this.spostaAuto()}>\r\n                                Sposta auto di 1\r\n                            </button>\r\n                        </td>\r\n                        <td className=\"tdController\" colspan=\"2\" >\r\n                            <VendiEdificio \r\n                                terreni={this.props.terreni}\r\n                                giocatori={this.props.giocatori}\r\n                                setTerreni={this.props.setTerreni}\r\n                                setGiocatori={this.props.setGiocatori} \r\n                                turnoGiocatore={this.props.turnoGiocatore}\r\n                            />\r\n                        </td>\r\n                        <td className=\"tdController\">\r\n                            <Ipoteca\r\n                                terreni={this.props.terreni}\r\n                                setTerreni={this.props.setTerreni}\r\n                                giocatori={this.props.giocatori}\r\n                                setGiocatori={this.props.setGiocatori} \r\n                                turnoGiocatore={this.props.turnoGiocatore}\r\n                                societ√†Stazioni={this.props.societ√†Stazioni}\r\n                                setSociet√†Stazioni={this.props.setSociet√†Stazioni}\r\n                            />\r\n                        </td>   \r\n                        <td className=\"tdController\">\r\n                            <Abbandona \r\n                                turnoGiocatore={this.props.turnoGiocatore}\r\n                                giocatori={this.props.giocatori}\r\n                                setGiocatori={this.props.setGiocatori}\r\n                                terreni={this.props.terreni}\r\n                                setTerreni={this.props.setTerreni}\r\n                                societ√†Stazioni={this.props.societ√†Stazioni}\r\n                                setSociet√†Stazioni={this.props.setSociet√†Stazioni}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    \r\n                    <tr className=\"trController\">\r\n                        <td className=\"tdController\">\r\n                            <button type=\"button\" onClick={() => this.tiraDadi()}>Tira dadi</button>\r\n                        </td>\r\n                        <td className=\"tdController\">\r\n                            <Costruisci \r\n                                terreni={this.props.terreni}\r\n                                giocatori={this.props.giocatori}\r\n                                setTerreni={this.props.setTerreni}\r\n                                setGiocatori={this.props.setGiocatori} \r\n                                turnoGiocatore={this.props.turnoGiocatore}\r\n                            />\r\n                        </td>\r\n                        <td className=\"tdController\">\r\n                            <Vendi \r\n                                terreni={this.props.terreni}\r\n                                setTerreni={this.props.setTerreni}\r\n                                giocatori={this.props.giocatori}\r\n                                setGiocatori={this.props.setGiocatori} \r\n                                turnoGiocatore={this.props.turnoGiocatore}\r\n                                societ√†Stazioni={this.props.societ√†Stazioni}\r\n                                setSociet√†Stazioni={this.props.setSociet√†Stazioni}\r\n                            />\r\n                        </td>    \r\n                        <td className=\"tdController\">\r\n                            <Button variant=\"outlined\" size=\"small\" onClick={() => this.finisciTurno()}>\r\n                                finisci turno\r\n                            </Button>\r\n                        </td>   \r\n                        <td className=\"tdController\">\r\n                            <Acquista \r\n                              attualeCasella={this.props.segnalini[this.props.turnoGiocatore][5]}\r\n                              caselle={this.props.caselle} \r\n                              setCaselle={this.props.setCaselle}\r\n                              turnoGiocatore={this.props.turnoGiocatore}\r\n                              terreni={this.props.terreni}\r\n                              setTerreni={this.props.setTerreni}\r\n                              giocatori={this.props.giocatori}\r\n                              setGiocatori={this.props.setGiocatori}\r\n                            />\r\n                        </td>   \r\n                    </tr>\r\n                    <tr className=\"trControllerTA\">\r\n                        <td className=\"tdController\" colspan=\"5\">\r\n                            <AreaTesto\r\n                                messaggioUno={this.state.primoMsgTA}\r\n                                messaggioDue={this.state.secondoMsgTA}\r\n                                messaggioTre={this.state.terzoMsgTA}\r\n                            />  \r\n                        </td>  \r\n                    </tr>\r\n                </table> \r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass AreaTesto extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        // messaggioUno: primoMsgTA,\r\n        // messaggioDue: secondoMsgTA,\r\n        // messaggioTre: terzoMsgTA\r\n      };\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"ControllerTA\" id=\"w3review\" name=\"w3review\" >\r\n                <div>{this.props.messaggioUno}</div>\r\n                <div>{this.props.messaggioDue}</div>\r\n                <div>{this.props.messaggioTre}</div>\r\n            {/* {this.props.primoMsgTA+\"\\n\"+this.props.secondoMsgTA+\"\\n\"+this.props.terzoMsgTA}  */}\r\n        </div>\r\n      );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ComponentController;\r\n\r\n","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\Banca.js",["126","127"],"import React, { Component } from 'react';\r\nimport TabellaGiocatori from './Tabelle/TabellaGiocatori';\r\n\r\nclass Banca extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            saldoContoGiocatori: [0,0,0,0,0,0],\r\n            contrattiGiocatori: [0,0,0,0,0,0],\r\n        }\r\n    }\r\n\r\n\r\n    // Passa i parametri a TabellaGiocatori (attualmente non funziona)\r\n    creaTabellaGiocatori = () => {\r\n        for(let i=1; i<=6; i++){\r\n            //this.state.createData(i, this.state.saldoContoGiocatori[i]);\r\n            <TabellaGiocatori props={i, this.state.saldoContoGiocatori[i]} />\r\n        }\r\n    }\r\n\r\n    //Modifica il saldo al giocatore (giocatore identificato tramite un numero int)\r\n    modificaSaldo = (sommaDiDenaro, giocatore) => {\r\n        if(this.state.saldoContoPedine[giocatore] + sommaDiDenaro >= 0){\r\n            this.state.saldoContoPedine[giocatore] += sommaDiDenaro;\r\n        }else{\r\n            console.log(\"Errore\"); //TODO\r\n        }\r\n    }\r\n\r\n    giocatorePassaDalVia = (giocatori,turnoGiocatore,setGiocatori) => {\r\n        // Incrementa il capitale del giocatore di turno di 500 quando passa dal VIA              \r\n        var nuoviGiocatori = giocatori;\r\n        nuoviGiocatori[turnoGiocatore].capitale=giocatori[turnoGiocatore].capitale+500;\r\n        setGiocatori(nuoviGiocatori);\r\n        alert('Giocatore:'+turnoGiocatore+ 'Passa Dal Via');  \r\n    }\r\n\r\n    getSaldoGiocatore\r\n}\r\nexport default Banca;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\SceltaPedina.js",[],"C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Acquista.js",["128","129","130","131","132","133","134","135","136","137","138"],"import React from 'react';\r\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\r\n\r\n\r\nfunction Acquista(props){\r\n\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\nconst acquistaProprieta = () => {\r\n  if (props.caselle[props.attualeCasella].tipo=='terreno') { acquistaTerreno(); }\r\n  if (props.caselle[props.attualeCasella].tipo=='societa') { acquistaSocieta(); }\r\n  if (props.caselle[props.attualeCasella].tipo=='stazione') { acquistaStazioni(); }\r\n}\r\n\r\nconst acquistaTerreno = () => { \r\n  var nuoviTerreni = props.terreni;\r\n  var nuoviGiocatori = props.giocatori;\r\n  var nuoveCaselle = props.caselle;\r\n\r\n  var vecchioCapitale = nuoviGiocatori[props.turnoGiocatore].capitale;\r\n  var nuovoCapitale;\r\n\r\n  var i;\r\n  for (i = 0; i < props.terreni.length; i++) {\r\n    // Se la casella √® un terreno trovo il nome nel array terreni\r\n    // Join tra gli array per NOME\r\n    // Se il giocatore ha abbastanza soldi procede con l'acquisto\r\n    // Se il nome della casella di tipo terreno corrisponde al nome nell'array terreni\r\n    // allora aggiorno il proprietario Sia in array Terreni sia in array Caselle    \r\n    if (props.terreni[i].nome==props.caselle[props.attualeCasella].nome) {\r\n      if (props.terreni[i].valore<=vecchioCapitale) {\r\n      // Aggiorno array terreni\r\n      nuoviTerreni[i].proprietario=props.turnoGiocatore;\r\n      props.setTerreni(nuoviTerreni);  \r\n      // Aggiorno array giocatori\r\n      nuovoCapitale = vecchioCapitale-props.terreni[i].valore;\r\n      nuoviGiocatori[props.turnoGiocatore].capitale=nuovoCapitale;\r\n      props.setGiocatori(nuoviGiocatori);\r\n      // Aggiorno array caselle\r\n      nuoveCaselle[props.attualeCasella].proprietario=props.turnoGiocatore;\r\n      props.setCaselle(nuoveCaselle);\r\n      alert('Terreno acquisito casella:'+props.attualeCasella); \r\n     } else {\r\n      alert('Non hai abbastanza soldi'); \r\n     }\r\n    }\r\n  }\r\n  \r\n};\r\n\r\nconst acquistaSocieta = () => { \r\n  alert('da fare'); \r\n}\r\n\r\nconst acquistaStazioni = () => { \r\n  alert('da fare'); \r\n}\r\n\r\nconst body = (\r\n    <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n        \r\n      <h4 style={{margin:'16px'}}>Giocatore {props.turnoGiocatore} sei sulla casella {props.attualeCasella}</h4>\r\n      <h4 style={{margin:'16px'}}>Di tipo: {props.caselle[props.attualeCasella].tipo}</h4> \r\n      <h4 style={{margin:'16px'}}>Di nome: {props.caselle[props.attualeCasella].nome}</h4> \r\n      <h4 style={{margin:'16px'}}>Proprietario: {props.caselle[props.attualeCasella].proprietario}</h4>\r\n      \r\n      {(props.caselle[props.attualeCasella].proprietario==-1 && \r\n         (props.caselle[props.attualeCasella].tipo=='terreno'\r\n          ||\r\n          props.caselle[props.attualeCasella].tipo=='societa'\r\n          ||\r\n          props.caselle[props.attualeCasella].tipo=='stazione')\r\n        )?     \r\n          <Button variant=\"contained\" style={{margin:'16px'}} onClick={() => acquistaProprieta()}>\r\n          Acquista\r\n          </Button> : \r\n          <h4 style={{margin:'16px'}}>non lo puoi acquistare</h4>  }\r\n      \r\n    </Paper>\r\n  );\r\n\r\n    return(\r\n        <div>\r\n          <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" style={{marginLeft:'5px'}}>\r\n          Acquista\r\n          </Button>\r\n          <Modal open={openModal} onClose={handleClose}>\r\n            {body}\r\n          </Modal>\r\n        </div>\r\n        );\r\n        }\r\n\r\nexport default Acquista;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\CarteProbabilitaImprevisto\\Carte.js",["139"],"import React, { Component } from 'react';\r\nimport Banca from '../Banca';\r\n\r\nclass Carte extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //carta = [Numero carta, Descrizione, Somma di denaro, Somma per ogni casa, Somma per ogni albergo, Somma per ogni giocatore]\r\n            carte: [\r\n                //Probabilit√†\r\n                [0, 'Serata della Grande Opera: incassa $50 da ogni giocaotore', 0, 0, 0, 50],\r\n                [1, 'Errore della banca: incassa $200', 200, 0, 0, 0],\r\n                [2, 'Parcella del medico: paga $50', -50, 0, 0, 0],\r\n                [3, 'Rimborso della imposta sul reddito: incassa $20', 20, 0, 0, 0],\r\n                [4, 'Rendimento assicurazione sulla vita: incassa $100', 100, 0, 0, 0],\r\n                [5, 'Paga le spese mediche ospedaliere: paga $50', -50, 0, 0, 0],\r\n                [6, 'Paga le tasse scolastiche: paga $50', -50, 0, 0, 0],\r\n                [7, 'Commisione consulenza: incassa $25', 25, 0, 0, 0],\r\n                [8, 'Hai vinto il secondo posto in una gara di bellezza: incassa $10', 10, 0, 0, 0],\r\n                [9, 'Eredit√†: incassa $100', 100, 0, 0, 0],\r\n                [10, 'Vendita di azioni: incassa $100', 100, 0, 0, 0],\r\n                [11, 'Rendimento fondo vacanze: incassa $100', 100, 0, 0, 0],\r\n                [12, 'Sei stato tassato per le riparazioni in questa strada: paga $45 per casa e $115 per hotel', 0, -45, -115, 0],\r\n                [13, 'Esci di Prigione', 0, 0, 0, 0],\r\n                [14, 'Vai in Prigione senza passare dal Via', 0, 0, 0, 0],\r\n                [15, 'Vai al Via', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n\r\n                //Imprevisti\r\n                [16, 'Esci di Prigione', 0, 0, 0, 0],\r\n                [17, 'Vai al Via', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n                [18, 'Vai a Illinois Avenue', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$ IN CASO SI PASSI DAL VIA, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n                [19, 'Vai a St. Charles Place', 0, 0, 0, 0], //ATTENZIONE LA CARTA DOVREBBE DARE 200$ IN CASO SI PASSI DAL VIA, DA FARE DOPO SVILUPPO DELLA CASELLA VIA\r\n                [20, 'La Banca paga un dividendo: incassi $50', 50, 0, 0, 0],\r\n                [21, 'Vai indietro di 3 caselle', 0, 0, 0, 0],\r\n                [22, 'Vai in Prigione senza passare dal Via', 0, 0, 0, 0],\r\n                [23, 'Riparazioni generali a tutte le tue propriet√†: paga $25 per casa e $100 per hotel', 0, -25, -100, 0],\r\n                [24, 'Paga tasse scadute: paga $10', -10, 0, 0, 0],\r\n                [25, 'Vai a Reading Railroad', 0, 0, 0, 0],\r\n                [26, 'Vai a Boardwalk', 0, 0, 0, 0],\r\n                [27, 'Sei eletto chairman della tavola da gioco: paga $50 da ogni giocaotore', 0, 0, 0, -50],\r\n                [28, 'Rendimento prestito immobiliare: incassa $150', 150, 0, 0, 0],\r\n                [29, 'Muovi la pedina al prossimo Utility, se non ha proprietario puoi comprarlo, se lo ha tira i dadi e paga 10 volte il risultato del lancio', 0, 0, 0, 0],\r\n                [30, 'Muovi la pedina alla prossimo Stazione, se non ha proprietario puoi comprarla, se lo ha paga il doppio del noleggio', 0, 0, 0, 0],\r\n                [31, 'Hai vinto una competizione di cruciverba: incassa $100', 100, 0, 0, 0],\r\n\r\n            ]\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    estraiCarta = (probabilitaOImprevisto, giocatore) => { //probabilit√†==true imprevisto==false\r\n        let idCarta;\r\n        if (probabilitaOImprevisto){\r\n            idCarta = Math.floor(Math.random()*(15));\r\n        }else{\r\n            idCarta = Math.floor(Math.random()*(31-16)+16);\r\n        };\r\n        this.attivaCarta(idCarta, giocatore);\r\n    }\r\n\r\n    \r\n    attivaCarta = (idCarta, giocatore) => {\r\n        //  TODO\r\n        alert('Giocatore: ' + giocatore + ' \\n La carta √®: ' + this.state.carte[idCarta][1]);\r\n        if (this.state.carte[idCarta][2] != 0){\r\n             <Banca saldoContoGiocatori={() => this.props.modificaSaldo(this.state.carte[idCarta][2], giocatore)}/>\r\n        }\r\n    }\r\n}\r\nexport default Carte;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Vendi.js",["140","141"],"import React from 'react';\r\nimport {Paper, Modal, Button, Grid, TextField, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\r\n\r\n\r\nfunction Vendi(props){\r\n\r\n    \r\n  \r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n\r\n//Stato del terreno da vendere\r\nconst [terreno, setTerreno] = React.useState('');\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\n//Stato del gicatore che vuole vendere\r\nconst [venditore, setVenditore] = React.useState('');\r\nconst handleChangeVenditore = (event) => {\r\n  setVenditore(event.target.value);\r\n};\r\n\r\n//Stato del gicatore che vuole comprare, eventualmente la banca\r\nconst [aquirente, setAquirente] = React.useState('');\r\nconst handleChangeAquirente = (event) => {\r\n  setAquirente(event.target.value);\r\n};\r\n\r\n//Stato del prezzo a cui viene venduta la propriet√†\r\nconst [prezzo, setPrezzo] = React.useState('');\r\nconst handleChangePrezzo = (event) => {\r\n  setPrezzo(event.target.value);\r\n};\r\n\r\n\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction EsisteSociet√†Stazione(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.societ√†Stazioni.length){\r\n    if(terreno === props.societ√†Stazioni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction EsisteGiocatore(nome){\r\n  \r\n  var i = 0;\r\n  while(i < props.giocatori.length){\r\n    if(nome === props.giocatori[i].nome){\r\n     return(i); \r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  return(-1);\r\n\r\n}\r\n\r\nfunction VendiTerreno(){\r\n\r\n  //verifico che il terreno esista e salvo il risultato in propriet√†\r\n  var n = EsisteTerreno();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.terreni[n];\r\n  \r\n  if(!(propriet√†.proprietario == venditore)){\r\n    alert('Non puoi vendere qualcosa che non ti appartiene');\r\n    return;\r\n  }\r\n  //verifico che il venditore esista e che non sia la banca\r\n  var y = EsisteGiocatore(venditore);\r\n  if(y === -1){\r\n    alert('Controlla che il nome del venditore sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var venditore2 = props.giocatori[y];\r\n  if(venditore2.inGioco === false){\r\n    alert('Hai inserito un venditore che non √® pi√π in gioco');\r\n    return;\r\n  }\r\n \r\n  \r\n  //verifico che l'aquirente esista\r\n  var x = EsisteGiocatore(aquirente);\r\n  var aquirente2;\r\n  if(x === -1){\r\n    alert(\"Controlla che il nome dell'aquirente sia scritto in modo corretto\");\r\n    return;\r\n  }\r\n  aquirente2 = props.giocatori[x];\r\n  if(aquirente2.inGioco === false){\r\n    alert('Hai inserito un aquirente che non √® pi√π in gioco');\r\n    return;\r\n  }\r\n  //verifico che sul terreno non ci siano ne case ne alberghi\r\n  if(propriet√†.case > 0 || propriet√†.alberghi > 0){\r\n    alert('Non puoi vendere un terreno con case o alberghi');\r\n    return;\r\n  }\r\n  //Verifico che venditore e aquirente non siano lo stesso giocatore\r\n  if(venditore2 === aquirente2){\r\n    alert('Non puoi vendere a te stesso');\r\n    return;\r\n  }\r\n  \r\n  //verifico che il prezzo sia > 0\r\n  if(prezzo <= 0){\r\n    alert('Controlla di aver inserito un prezzo maggiore di zero');\r\n    return;\r\n  }\r\n  //sposto i soldi dall'aquirente2 al venditore2\r\n  if(prezzo > 0){\r\n    aquirente2.capitale = aquirente2.capitale - parseInt(prezzo);\r\n    venditore2.capitale = venditore2.capitale + parseInt(prezzo);\r\n  }\r\n  //aquirente diventa il nuovo proprietario della propriet√†\r\n  propriet√†.proprietario = aquirente2.nome;\r\n  \r\n  //aggiorno le variabili di stato che contengono l'elenco dei terreni e dei giocatori\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = propriet√†;  \r\n  props.setTerreni(nuoviTerreni);  \r\n  \r\n  var nuoviGiocatori = props.giocatori;\r\n  nuoviGiocatori[x] = aquirente2;\r\n  nuoviGiocatori[y] = venditore2;\r\n  props.setGiocatori(nuoviGiocatori);\r\n\r\n  console.log(props.giocatori);\r\n  console.log(props.terreni);\r\n\r\n  alert('La vendita √® andata a buon fine');\r\n}\r\n\r\nfunction VendiStazioneSociet√†(){\r\n\r\n  //verifico che la societ√† / stazione esista e salvo il risultato in propriet√†\r\n  var n = EsisteSociet√†Stazione();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome della societ√† o della stazione sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.societ√†Stazioni[n];\r\n  \r\n  if(!(propriet√†.proprietario == venditore)){\r\n    alert('Non puoi vendere qualcosa che non ti appartiene');\r\n    return;\r\n  }\r\n  //verifico che il venditore esista \r\n  var y = EsisteGiocatore(venditore);\r\n  if(y === -1){\r\n    alert('Controlla che il nome del venditore sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var venditore2 = props.giocatori[y];\r\n  if(venditore2.inGioco === false){\r\n    alert('Hai inserito un venditore che non √® pi√π in gioco');\r\n    return;\r\n  }\r\n \r\n  \r\n  //verifico che l'aquirente esista\r\n  var x = EsisteGiocatore(aquirente);\r\n  var aquirente2;\r\n  if(x === -1){\r\n    alert(\"Controlla che il nome dell'aquirente sia scritto in modo corretto\");\r\n    return;\r\n  }\r\n  aquirente2 = props.giocatori[x];\r\n  if(aquirente2.inGioco === false){\r\n    alert('Hai inserito un aquirente che non √® pi√π in gioco');\r\n    return;\r\n  }\r\n  \r\n  //Verifico che venditore e aquirente non siano lo stesso giocatore\r\n  if(venditore2 === aquirente2){\r\n    alert('Non puoi vendere a te stesso');\r\n    return;\r\n  }\r\n  \r\n  //verifico che il prezzo sia > 0\r\n  if(prezzo <= 0){\r\n    alert('Controlla di aver inserito un prezzo maggiore di zero');\r\n    return;\r\n  }\r\n  //sposto i soldi dall'aquirente2 al venditore2\r\n  if(prezzo > 0){\r\n    aquirente2.capitale = aquirente2.capitale - parseInt(prezzo);\r\n    venditore2.capitale = venditore2.capitale + parseInt(prezzo);\r\n  }\r\n  //aquirente diventa il nuovo proprietario della propriet√†\r\n  propriet√†.proprietario = aquirente2.nome;\r\n  \r\n  //aggiorno le variabili di stato che contengono l'elenco delle societ√†, delle stazioni e dei giocatori\r\n  var nuoveSociet√†Stazioni = props.societ√†Stazioni;\r\n  nuoveSociet√†Stazioni[n] = propriet√†;  \r\n  props.setSociet√†Stazioni(nuoveSociet√†Stazioni);  \r\n  \r\n  var nuoviGiocatori = props.giocatori;\r\n  nuoviGiocatori[x] = aquirente2;\r\n  nuoviGiocatori[y] = venditore2;\r\n  props.setGiocatori(nuoviGiocatori);\r\n\r\n  console.log(props.giocatori);\r\n  console.log(props.societ√†Stazioni);\r\n\r\n  alert('La vendita √® andata a buon fine');\r\n}\r\n\r\n\r\n\r\n//Stato del RadioGrup per la gerstione del tipo di vendita\r\n//si pu√≤ scegliere se vendere terreni o stazioni/societ√†\r\nconst [tipoVendita, setTipoVendita] = React.useState('Terreno');\r\nconst handleChangeTipoVendita = (event) => { setTipoVendita(event.target.value) };\r\n\r\nfunction Vendita(){\r\n  \r\n  if(tipoVendita === 'Terreno'){\r\n    VendiTerreno();\r\n  }\r\n  else{\r\n    VendiStazioneSociet√†();\r\n  }\r\n}\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n      \r\n    <h2 style={{margin:'16px'}}>Cosa vuoi vendere</h2>\r\n    <RadioGroup value={tipoVendita} onChange={handleChangeTipoVendita} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"Terreno\" control={<Radio />} label=\"Terreno\" />\r\n        <FormControlLabel value=\"StazioneSociet√†\" control={<Radio />} label=\"Stazione o Societ√†\" />\r\n    </RadioGroup>\r\n    \r\n    <Grid container direction=\"column\">\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Inserisci il nome della casella che vuoi vendere</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'32px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n      </Grid>\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Nome del venditore</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'265px', width:'350px'}} onChange={handleChangeVenditore}/>\r\n      </Grid>\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Nome dell'aquirente</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'259px', width:'350px'}} onChange={handleChangeAquirente}/>\r\n      </Grid>\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Quanto dovr√† pagare?</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'246px', width:'350px'}} onChange={handleChangePrezzo}/>\r\n      </Grid>\r\n      <Button variant=\"contained\" style={{margin:'16px', width:'100px'}} onClick={() => Vendita()} >\r\n        Vendi\r\n      </Button>\r\n    </Grid>\r\n\r\n    \r\n       \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Vendi\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default Vendi;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Costruisci.js",["142","143"],"import React from 'react';\r\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel, TextField, Grid} from '@material-ui/core';\r\n\r\n\r\nfunction Costruisci(props){\r\n\r\n    \r\n\r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n//Stato del RadioGrup casaAlbergo usato per scegliere la tipologia di edificio da costruire\r\nconst [edificio, setEdificio] = React.useState('casa');\r\nconst handleChangeTipoDiEdificio = (event) => { setEdificio(event.target.value) };\r\n\r\n//Stato del RadioGrup terreno usato per scegliere il terreno su cui costruire l'edificio\r\nconst [terreno, setTerreno] = React.useState(1);\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction VerificaColore(colore, giocatore){\r\n  var i = 0;\r\n  while(i < props.terreni.length){\r\n    if((props.terreni[i].colore === colore) && !(props.terreni[i].proprietario === giocatore)){\r\n      return(false);\r\n    }\r\n    i++\r\n  }\r\n  \r\n  return(true);\r\n}\r\n\r\n\r\nfunction CostruisciCasa(){\r\n  //verifico che il terreno esista e salvo il risultato in propriet√†\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.terreni[n];\r\n  //verifico che la propriet√† non sia ipotecata\r\n  if(propriet√†.ipotecato === true){\r\n    alert('Non puoi costruire su un terreno ipotecato');\r\n    return;\r\n  }\r\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi costruire su un terreno che non √® tuo');\r\n    return;\r\n  }\r\n  //Per poter costruire su propriet√† devi avere tutti i terreni dello stesso colore\r\n  var verifica = VerificaColore(propriet√†.colore, propriet√†.proprietario);\r\n  if(!verifica){\r\n    alert('Per costruire devi prima possedere tutte le caselle dello stesso colore');\r\n    return;\r\n  }\r\n  //Su un terreno si possono costruire massimo 4 case\r\n  if(propriet√†.case >= 4){\r\n    alert('Su un terreno si possono costruire massimo quattro case');\r\n    return;\r\n  }\r\n  //Se sul terreno c'√® un albergo non posso costruirvi delle case\r\n  if(propriet√†.alberghi > 0){\r\n    alert(\"Se su un terreno c'e' un albergo non puoi costruirvi una casa\");\r\n    return;\r\n  }\r\n  //modifico l'array terreni e l'array giocatori\r\n  propriet√†.case = propriet√†.case + 1;\r\n  console.log(propriet√†);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = propriet√†;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var costoCostruzione = propriet√†.valore*3/4;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - costoCostruzione;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('La costruzione della casa √® andata a buon fine');\r\n\r\n}\r\n\r\nfunction CostruisciAlbergo(){\r\n  //verifico che il terreno esista e salvo il risultato in propriet√†\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.terreni[n];\r\n  //verifico che la propriet√† non sia ipotecata\r\n  if(propriet√†.ipotecato === true){\r\n    alert('Non puoi costruire su un terreno ipotecato');\r\n    return;\r\n  }\r\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi costruire su un terreno che non √® tuo');\r\n    return;\r\n  }\r\n  //Su un terreno si pu√≤ costruire massimo un albergo\r\n  if(propriet√†.alberghi > 0){\r\n    alert('Su un terreno si pu√≤ costruire massimo un albergo');\r\n    return;\r\n  }\r\n  \r\n  //Per poter costruire un albergo devi avere quattro case su propriet√† \r\n  if(propriet√†.case < 4){\r\n    alert('Per costruire un albergo su questo terreno devi prima possedere quattro case');\r\n    return;\r\n  }\r\n  \r\n  //modifico l'array terreni e l'array giocatori\r\n  propriet√†.alberghi = propriet√†.alberghi + 1;\r\n  propriet√†.case = 0;\r\n  console.log(propriet√†);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = propriet√†;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var costoCostruzione = propriet√†.valore*3/4;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - costoCostruzione;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert(\"La costruzione dell'albergo √® andata a buon fine\");\r\n\r\n}\r\n\r\nfunction CostruisciEdificio(){\r\n  if(edificio === 'casa'){\r\n    CostruisciCasa();\r\n  }\r\n  else{\r\n    CostruisciAlbergo();\r\n  }\r\n  \r\n}\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n      \r\n    <h2 style={{margin:'16px'}}>Cosa vuoi costruire?</h2>\r\n    <RadioGroup value={edificio} onChange={handleChangeTipoDiEdificio} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"casa\" control={<Radio />} label=\"Casa\" />\r\n        <FormControlLabel value=\"albergo\" control={<Radio />} label=\"Albergo\" />\r\n    </RadioGroup>\r\n\r\n    <h2 style={{margin:'16px'}}>Dove vuoi costruire?</h2>\r\n    <Grid container direction=\"column\">\r\n      <TextField variant=\"outlined\" style={{margin:'16px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n    \r\n      <Button variant=\"contained\" style={{margin:'16px', width:'350px'}} onClick={() => CostruisciEdificio()}>\r\n        Costruisci questo edificio\r\n      </Button>\r\n   \r\n    </Grid>\r\n    \r\n    \r\n    \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Costruisci\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default Costruisci;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\VendiEdificio.js",["144","145"],"import React from 'react';\r\nimport {Paper, Modal, Button, Radio, RadioGroup, FormControlLabel, TextField, Grid} from '@material-ui/core';\r\n\r\n\r\nfunction VendiEdificio(props){\r\n\r\n    \r\n\r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n//Stato del RadioGrup casaAlbergo usato per scegliere la tipologia di edificio da costruire\r\nconst [edificio, setEdificio] = React.useState('casa');\r\nconst handleChangeTipoDiEdificio = (event) => { setEdificio(event.target.value) };\r\n\r\n//Stato del RadioGrup terreno usato per scegliere il terreno su cui costruire l'edificio\r\nconst [terreno, setTerreno] = React.useState(1);\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction VendiCasa(){\r\n  //verifico che il terreno esista e salvo il risultato in propriet√†\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.terreni[n];\r\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi vendere gli edifici se il terreno che non √® tuo');\r\n    return;\r\n  }\r\n  \r\n  //Se sul terreno non ci sono case non ho nulla da vendere\r\n  if(propriet√†.case === 0){\r\n    alert(\"Su questo terreno non ci sono case\");\r\n    return;\r\n  }\r\n  //modifico l'array terreni e l'array giocatori\r\n  propriet√†.case = propriet√†.case - 1;\r\n  console.log(propriet√†);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = propriet√†;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = propriet√†.valore*3/8;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('La vendita della casa √® andata a buon fine');\r\n\r\n}\r\n\r\nfunction VendiAlbergo(){\r\n  //verifico che il terreno esista e salvo il risultato in propriet√†\r\n  var n = EsisteTerreno();\r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.terreni[n];\r\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi vendere gli edifici che non sono su un tuo terreno');\r\n    return;\r\n  }\r\n  //Verifico ceh sul terreno ci sia un albergo\r\n  if(!(propriet√†.alberghi === 1)){\r\n    alert(\"Su questo terreno non c'√® un albergo\");\r\n    return;\r\n  }\r\n  \r\n  \r\n  //modifico l'array terreni e l'array giocatori\r\n  //quando vendo un albergo alla banca ricevo in cambio met√† del prezzo d'aquisto e 4 case\r\n  propriet√†.alberghi = 0;\r\n  propriet√†.case = 4;\r\n  console.log(propriet√†);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = propriet√†;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = propriet√†.valore*3/8;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert(\"La vendita dell'albergo √® andata a buon fine\");\r\n\r\n}\r\n\r\nfunction VendiEdificio(){\r\n  if(edificio === 'casa'){\r\n    VendiCasa();\r\n  }\r\n  else{\r\n    VendiAlbergo();\r\n  }\r\n  \r\n}\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n      \r\n    <h2 style={{margin:'16px'}}>Cosa vuoi vendere?</h2>\r\n    <RadioGroup value={edificio} onChange={handleChangeTipoDiEdificio} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"casa\" control={<Radio />} label=\"Casa\" />\r\n        <FormControlLabel value=\"albergo\" control={<Radio />} label=\"Albergo\" />\r\n    </RadioGroup>\r\n\r\n    <h2 style={{margin:'16px'}}>Dove si trova questo edificio?</h2>\r\n    <Grid container direction=\"column\">\r\n      <TextField variant=\"outlined\" style={{margin:'16px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n    \r\n      <Button variant=\"contained\" style={{margin:'16px', width:'350px'}} onClick={() => VendiEdificio()}>\r\n        vendi questo edificio\r\n      </Button>\r\n   \r\n    </Grid>\r\n    \r\n    \r\n    \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Vendi edificio\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default VendiEdificio;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Ipoteca.js",["146","147","148","149"],"import React from 'react';\r\nimport {Paper, Modal, Button, Grid, TextField, Radio, RadioGroup, FormControlLabel} from '@material-ui/core';\r\n\r\n\r\nfunction Ipoteca(props){\r\n\r\n    \r\n  \r\n    \r\n\r\n//Stato del Modale utilizato per costruire un edificio\r\nconst [openModal, setOpenModal] = React.useState(false);\r\nconst handleOpen = () => { setOpenModal(true) };\r\nconst handleClose = () => { setOpenModal(false) };\r\n\r\n\r\n//Stato del terreno da vendere\r\nconst [terreno, setTerreno] = React.useState('');\r\nconst handleChangeTerreno = (event) => {\r\n  setTerreno(event.target.value);\r\n};\r\n\r\n//Stato del RadioGrup per la gerstione del tipo di vendita\r\n//si pu√≤ scegliere se vendere terreni o stazioni/societ√†\r\nconst [tipoVendita, setTipoVendita] = React.useState('Terreno');\r\nconst handleChangeTipoVendita = (event) => { setTipoVendita(event.target.value) };\r\n\r\n\r\n//Stato del RadioGrup per la gerstione dell'azione da svolgere\r\n//si pu√≤ scegliere tra ipotecare o riscattare l'ipoteca\r\nconst [azione, setAzione] = React.useState('Ipoteca');\r\nconst handleChangeAzione = (event) => { setAzione(event.target.value) };\r\n\r\n\r\n\r\n\r\nfunction EsisteTerreno(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.terreni.length){\r\n    if(terreno === props.terreni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\nfunction EsisteSociet√†Stazione(){\r\n  var i = 0;\r\n  var esiste = false;\r\n  var n;\r\n  while(i < props.societ√†Stazioni.length){\r\n    if(terreno === props.societ√†Stazioni[i].nome){\r\n      esiste = true;\r\n      n = i;\r\n      i = 100;\r\n    }\r\n    else{\r\n      i++;\r\n    }\r\n  }\r\n  if(esiste){\r\n    return(n);\r\n  }\r\n  else{\r\n    return(-1);\r\n  }\r\n}\r\n\r\n\r\nfunction IpotecaTerreno(){\r\n\r\n  //verifico che il terreno esista e salvo il risultato in propriet√†\r\n  var n = EsisteTerreno();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.terreni[n];\r\n  \r\n \r\n  //verifico che sul terreno non ci siano ne case ne alberghi\r\n  if(propriet√†.case > 0 || propriet√†.alberghi > 0){\r\n    alert('Non puoi ipotecare un terreno con case o alberghi');\r\n    return;\r\n  }\r\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi ipotecare una propriet√† che non ti appartiene');\r\n    return;\r\n  }\r\n  \r\n  //modifico l'array terreni e l'array giocatori\r\n  propriet√†.ipotecato = true;\r\n  console.log(propriet√†);\r\n  var nuoviTerreni = props.terreni;\r\n  nuoviTerreni[n] = propriet√†;\r\n  props.setTerreni(nuoviTerreni);\r\n  console.log(props.terreni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = propriet√†.valore/2;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('Questa propriet√† √® stata ipotecata');\r\n}\r\n\r\nfunction IpotecaStazioneSociet√†(){\r\n\r\n  //verifico che la societ√† / stazione esista e salvo il risultato in propriet√†\r\n  var n = EsisteSociet√†Stazione();\r\n  \r\n  if(n === -1){\r\n    alert('Controlla che il nome della societ√† o della stazione sia scritto in modo corretto');\r\n    return;\r\n  }\r\n  var propriet√† = props.societ√†Stazioni[n];\r\n  \r\n  //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n  if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n    alert('Non puoi Ipotecare una propriet√† che non ti appartiene');\r\n    return;\r\n  }\r\n   \r\n  //modifico l'array terreni e l'array giocatori\r\n  propriet√†.ipotecato = true;\r\n  console.log(propriet√†);\r\n  var nuoveSociet√†Stazioni = props.societ√†Stazioni;\r\n  nuoveSociet√†Stazioni[n] = propriet√†;\r\n  props.setSociet√†Stazioni(nuoveSociet√†Stazioni);\r\n  console.log(props.societ√†Stazioni);\r\n\r\n  var nuoviGiocatori = props.giocatori;\r\n  var guadagno = propriet√†.valore/2;\r\n  nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale + guadagno;\r\n  props.setGiocatori(nuoviGiocatori);\r\n  console.log(props.giocatori);\r\n\r\n  alert('Questa propriet√† √® stata ipotecata');\r\n\r\n \r\n}\r\n\r\n\r\nfunction Ipoteca(){\r\n  \r\n    if(tipoVendita === 'Terreno'){\r\n      IpotecaTerreno();\r\n    }\r\n    else{\r\n      IpotecaStazioneSociet√†();\r\n    }\r\n  }\r\n\r\n\r\n  \r\nfunction RiscattaTerreno(){\r\n\r\n    //verifico che il terreno esista e salvo il risultato in propriet√†\r\n    var n = EsisteTerreno();\r\n    \r\n    if(n === -1){\r\n      alert('Controlla che il nome del terreno sia scritto in modo corretto');\r\n      return;\r\n    }\r\n    var propriet√† = props.terreni[n];\r\n    \r\n   \r\n    //verifico  il terreno sia ipotecato\r\n    if(propriet√†.ipotecato === false){\r\n      alert('Non puoi riscattare un terreno che non √® ipotecato');\r\n      return;\r\n    }\r\n    //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n    if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n      alert('Non puoi Ipotecare una propriet√† che non ti appartiene');\r\n      return;\r\n    }\r\n    \r\n    //modifico l'array terreni e l'array giocatori\r\n    propriet√†.ipotecato = false;\r\n    console.log(propriet√†);\r\n    var nuoviTerreni = props.terreni;\r\n    nuoviTerreni[n] = propriet√†;\r\n    props.setTerreni(nuoviTerreni);\r\n    console.log(props.terreni);\r\n  \r\n    var nuoviGiocatori = props.giocatori;\r\n    var spesa = (propriet√†.valore/2) +(propriet√†.valore/10);\r\n    nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - spesa;\r\n    props.setGiocatori(nuoviGiocatori);\r\n    console.log(props.giocatori);\r\n  \r\n    alert(\"L'ipoteca su questa propriet√† √® stata riscattata con successo\");\r\n  }\r\n  \r\n  function RiscattaStazioneSociet√†(){\r\n  \r\n    //verifico che la societ√† / stazione esista e salvo il risultato in propriet√†\r\n    var n = EsisteSociet√†Stazione();\r\n    \r\n    if(n === -1){\r\n      alert('Controlla che il nome della societ√† o della stazione sia scritto in modo corretto');\r\n      return;\r\n    }\r\n    var propriet√† = props.societ√†Stazioni[n];\r\n    \r\n    //verifico che il turnoGiocatore sia proprietario di propriet√†\r\n    if(!(propriet√†.proprietario == props.turnoGiocatore)){\r\n      alert('Non puoi Ipotecare una propriet√† che non ti appartiene');\r\n      return;\r\n    }\r\n    //verifico  la societ√†/stazione sia ipotecata\r\n    if(propriet√†.ipotecato === false){\r\n        alert('Non puoi riscattare una societ√† o una stazione che non √® ipotecata');\r\n        return;\r\n      }\r\n     \r\n    //modifico l'array terreni e l'array giocatori\r\n    propriet√†.ipotecato = false;\r\n    console.log(propriet√†);\r\n    var nuoveSociet√†Stazioni = props.societ√†Stazioni;\r\n    nuoveSociet√†Stazioni[n] = propriet√†;\r\n    props.setSociet√†Stazioni(nuoveSociet√†Stazioni);\r\n    console.log(props.societ√†Stazioni);\r\n  \r\n    var nuoviGiocatori = props.giocatori;\r\n    var spesa = (propriet√†.valore/2) + (propriet√†.valore/10);\r\n    nuoviGiocatori[props.turnoGiocatore].capitale = nuoviGiocatori[props.turnoGiocatore].capitale - spesa;\r\n    props.setGiocatori(nuoviGiocatori);\r\n    console.log(props.giocatori);\r\n  \r\n    alert(\"L'ipoteca su questa propriet√† √® stata riscattata con successo\");\r\n  \r\n   \r\n  }\r\n  \r\n  \r\n  function Riscatta(){\r\n    \r\n      if(tipoVendita === 'Terreno'){\r\n        RiscattaTerreno();\r\n      }\r\n      else{\r\n        RiscattaStazioneSociet√†();\r\n      }\r\n    }\r\n  \r\n\r\n\r\n\r\nconst body = (\r\n  <Paper style={{marginTop:'16px', marginLeft:'200px', marginRight:'200px'}}>\r\n\r\n     <h2 style={{margin:'16px'}}>Che azione vuoi svolgere</h2>\r\n    <RadioGroup value={azione} onChange={handleChangeAzione} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"Ipotecare\" control={<Radio />} label=\"Ipotecare\" />\r\n        <FormControlLabel value=\"Riscattare\" control={<Radio />} label=\"Riscattare\" />\r\n    </RadioGroup>\r\n\r\n    <h2 style={{margin:'16px'}}>Su quale propriet√†?</h2>\r\n    <RadioGroup value={tipoVendita} onChange={handleChangeTipoVendita} style={{margin:'16px'}}>\r\n        <FormControlLabel value=\"Terreno\" control={<Radio />} label=\"Terreno\" />\r\n        <FormControlLabel value=\"StazioneSociet√†\" control={<Radio />} label=\"Stazione o Societ√†\" />\r\n    </RadioGroup>\r\n    \r\n    <Grid container direction=\"column\">\r\n      <Grid container directio=\"row\" alignItems=\"center\">\r\n        <h3 style={{margin:'16px'}}>Inserisci il nome della casella che vuoi ipotecare o riscattare</h3>\r\n        <TextField variant=\"outlined\" style={{margin:'16px', marginLeft:'32px', width:'350px'}} onChange={handleChangeTerreno}/>\r\n      </Grid>\r\n      \r\n      \r\n      {azione==='Ipotecare'?\r\n      <Button variant=\"contained\" style={{margin:'16px', width:'100px'}} onClick={() => Ipoteca()} >\r\n        ipoteca\r\n      </Button>\r\n      :\r\n      <Button variant=\"contained\" style={{margin:'16px', width:'200px'}} onClick={() => Riscatta()} >\r\n        Riscatta ipoteca\r\n      </Button>\r\n      }\r\n    </Grid>\r\n\r\n    \r\n       \r\n  </Paper>\r\n);\r\n\r\n\r\n\r\nreturn(\r\n<div>\r\n  <Button onClick={handleOpen} variant=\"outlined\" size=\"small\" >\r\n    Ipoteca\r\n  </Button>\r\n  <Modal open={openModal} onClose={handleClose}>\r\n    {body}\r\n  </Modal>\r\n</div>\r\n);\r\n}\r\nexport default Ipoteca;","C:\\Users\\ernesto\\Desktop\\progetto-monopoly-1-gruppo-monopoly-1\\src\\components\\AzioniConBottone\\Abbandona.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":2,"column":8,"nodeType":"156","messageId":"157","endLine":2,"endColumn":23},{"ruleId":"158","severity":1,"message":"159","line":39,"column":17,"nodeType":"160","endLine":39,"endColumn":117},{"ruleId":"154","severity":1,"message":"161","line":93,"column":53,"nodeType":"156","messageId":"157","endLine":93,"endColumn":65},{"ruleId":"162","severity":1,"message":"163","line":102,"column":13,"nodeType":"164","messageId":"165","endLine":119,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":140,"column":21,"nodeType":"168","endLine":140,"endColumn":51},{"ruleId":"154","severity":1,"message":"169","line":36,"column":11,"nodeType":"156","messageId":"157","endLine":36,"endColumn":16},{"ruleId":"154","severity":1,"message":"170","line":90,"column":14,"nodeType":"156","messageId":"157","endLine":90,"endColumn":15},{"ruleId":"154","severity":1,"message":"171","line":90,"column":17,"nodeType":"156","messageId":"157","endLine":90,"endColumn":30},{"ruleId":"154","severity":1,"message":"172","line":90,"column":32,"nodeType":"156","messageId":"157","endLine":90,"endColumn":45},{"ruleId":"154","severity":1,"message":"161","line":90,"column":47,"nodeType":"156","messageId":"157","endLine":90,"endColumn":59},{"ruleId":"154","severity":1,"message":"173","line":90,"column":61,"nodeType":"156","messageId":"157","endLine":90,"endColumn":67},{"ruleId":"174","severity":1,"message":"175","line":119,"column":89,"nodeType":"176","messageId":"177","endLine":119,"endColumn":90},{"ruleId":"178","severity":1,"message":"179","line":18,"column":39,"nodeType":"180","messageId":"181","endLine":18,"endColumn":40},{"ruleId":"182","severity":1,"message":"183","line":25,"column":13,"nodeType":"184","endLine":25,"endColumn":40},{"ruleId":"154","severity":1,"message":"185","line":2,"column":31,"nodeType":"156","messageId":"157","endLine":2,"endColumn":36},{"ruleId":"154","severity":1,"message":"186","line":2,"column":38,"nodeType":"156","messageId":"157","endLine":2,"endColumn":48},{"ruleId":"154","severity":1,"message":"187","line":2,"column":50,"nodeType":"156","messageId":"157","endLine":2,"endColumn":66},{"ruleId":"188","severity":1,"message":"189","line":12,"column":47,"nodeType":"176","messageId":"190","endLine":12,"endColumn":49},{"ruleId":"188","severity":1,"message":"189","line":13,"column":47,"nodeType":"176","messageId":"190","endLine":13,"endColumn":49},{"ruleId":"188","severity":1,"message":"189","line":14,"column":47,"nodeType":"176","messageId":"190","endLine":14,"endColumn":49},{"ruleId":"188","severity":1,"message":"189","line":32,"column":30,"nodeType":"176","messageId":"190","endLine":32,"endColumn":32},{"ruleId":"188","severity":1,"message":"189","line":69,"column":57,"nodeType":"176","messageId":"190","endLine":69,"endColumn":59},{"ruleId":"188","severity":1,"message":"189","line":70,"column":51,"nodeType":"176","messageId":"190","endLine":70,"endColumn":53},{"ruleId":"188","severity":1,"message":"189","line":72,"column":51,"nodeType":"176","messageId":"190","endLine":72,"endColumn":53},{"ruleId":"188","severity":1,"message":"189","line":74,"column":51,"nodeType":"176","messageId":"190","endLine":74,"endColumn":53},{"ruleId":"188","severity":1,"message":"191","line":66,"column":42,"nodeType":"176","messageId":"190","endLine":66,"endColumn":44},{"ruleId":"188","severity":1,"message":"189","line":113,"column":31,"nodeType":"176","messageId":"190","endLine":113,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":193,"column":31,"nodeType":"176","messageId":"190","endLine":193,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":75,"column":31,"nodeType":"176","messageId":"190","endLine":75,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":127,"column":31,"nodeType":"176","messageId":"190","endLine":127,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":60,"column":31,"nodeType":"176","messageId":"190","endLine":60,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":97,"column":31,"nodeType":"176","messageId":"190","endLine":97,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":100,"column":31,"nodeType":"176","messageId":"190","endLine":100,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":134,"column":31,"nodeType":"176","messageId":"190","endLine":134,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":189,"column":33,"nodeType":"176","messageId":"190","endLine":189,"endColumn":35},{"ruleId":"188","severity":1,"message":"189","line":223,"column":33,"nodeType":"176","messageId":"190","endLine":223,"endColumn":35},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'ComponentMenuDx' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don‚Äôt need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'visSegnalino' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'turno' is assigned a value but never used.","'a' is assigned a value but never used.","'xposSegnalino' is assigned a value but never used.","'tposSegnalino' is assigned a value but never used.","'strato' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]